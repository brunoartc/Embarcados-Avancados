
niosHello.elf:     file format elf32-littlenios2
niosHello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002840 memsz 0x00002840 flags r-x
    LOAD off    0x00004038 vaddr 0x00020038 paddr 0x00002860 align 2**12
         filesz 0x00001658 memsz 0x00001778 flags rw-
    LOAD off    0x00006000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000038 memsz 0x00000038 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000261c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00020000  00020000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  00020038  00002860  00004038  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00021690  00003eb8  00005690  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00003eb8  00003eb8  00006038  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  000217b0  000217b0  00006038  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000618  00000000  00000000  00006060  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000079fa  00000000  00000000  00006678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b54  00000000  00000000  0000e072  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002beb  00000000  00000000  00010bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000b60  00000000  00000000  000137b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001c0e  00000000  00000000  00014314  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000c3e  00000000  00000000  00015f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00016b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001d8  00000000  00000000  00016bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00018906  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00018909  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00018915  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00018916  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00018917  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00018922  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0001892d  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00018938  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000044  00000000  00000000  00018941  2**0
                  CONTENTS, READONLY
 27 .jdi          00004feb  00000000  00000000  00018985  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00041edc  00000000  00000000  0001d970  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
00020038 l    d  .rwdata	00000000 .rwdata
00021690 l    d  .bss	00000000 .bss
00003eb8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
000217b0 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosHello_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000002e4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000047c l     F .text	00000034 alt_dev_reg
00020038 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000754 l     F .text	0000020c altera_avalon_jtag_uart_irq
00000960 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0000121c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001370 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000139c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001810 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001950 l     F .text	0000003c alt_get_errno
0000198c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00021240 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
000216a8 g     O .bss	00000004 alt_instruction_exception_handler
000003d0 g     F .text	0000007c alt_main
000216b0 g     O .bss	00000100 alt_irq
00002860 g       *ABS*	00000000 __flash_rwdata_start
00001dac g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000216ac g     O .bss	00000004 errno
00021694 g     O .bss	00000004 alt_argv
00029664 g       *ABS*	00000000 _gp
0000044c g     F .text	00000030 usleep
000210c0 g     O .rwdata	00000180 alt_fd_list
00001dd0 g     F .text	00000090 alt_find_dev
00002200 g     F .text	00000148 memcpy
000018d4 g     F .text	0000007c alt_io_redirect
00002860 g       *ABS*	00000000 __DTOR_END__
0000209c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000b58 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002770 g     F .text	00000064 .hidden __udivsi3
0000200c g     F .text	00000090 alt_icache_flush
00021674 g     O .rwdata	00000004 alt_max_fd
00021688 g     O .rwdata	00000004 _global_impure_ptr
000217b0 g       *ABS*	00000000 __bss_end
00001720 g     F .text	000000f0 alt_iic_isr_register
00001ca4 g     F .text	00000108 alt_tick
000016d4 g     F .text	0000004c alt_ic_irq_enabled
00001c08 g     F .text	0000009c alt_alarm_stop
0002169c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00021098 g     O .rwdata	00000028 alt_dev_null
00001328 g     F .text	00000048 alt_dcache_flush_all
00021690 g       *ABS*	00000000 __ram_rwdata_end
0002166c g     O .rwdata	00000008 alt_dev_list
00020038 g       *ABS*	00000000 __ram_rodata_end
000027d4 g     F .text	00000058 .hidden __umodsi3
000217b0 g       *ABS*	00000000 end
00000694 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00002860 g       *ABS*	00000000 __CTOR_LIST__
0003d4c0 g       *ABS*	00000000 __alt_stack_pointer
00000d74 g     F .text	00000224 altera_avalon_jtag_uart_write
000024f8 g     F .text	00000180 __call_exitprocs
00000244 g     F .text	0000004c _start
000216a0 g     O .bss	00000004 _alt_tick_rate
000216a4 g     O .bss	00000004 _alt_nticks
000004e8 g     F .text	00000048 alt_sys_init
000023e0 g     F .text	00000118 __register_exitproc
00000a00 g     F .text	00000068 altera_avalon_jtag_uart_close
00020038 g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00000530 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001f68 g     F .text	000000a4 alt_get_fd
000010c4 g     F .text	00000158 alt_busy_sleep
00002184 g     F .text	0000007c memcmp
000005f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000217b0 g       *ABS*	00000000 __alt_stack_base
00000640 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00001e60 g     F .text	00000108 alt_find_file
000013d8 g     F .text	000000a4 alt_dev_llist_insert
00021690 g       *ABS*	00000000 __bss_start
00000290 g     F .text	00000054 main
00021698 g     O .bss	00000004 alt_envp
00000590 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00021678 g     O .rwdata	00000004 alt_errno
00002678 g     F .text	00000084 .hidden __divsi3
00002860 g       *ABS*	00000000 __CTOR_END__
00020000 g       *ABS*	00000000 __flash_rodata_start
00002860 g       *ABS*	00000000 __DTOR_LIST__
000004b0 g     F .text	00000038 alt_irq_init
00001ba4 g     F .text	00000064 alt_release_fd
00002138 g     F .text	00000014 atexit
0002168c g     O .rwdata	00000004 _impure_ptr
00021690 g     O .bss	00000004 alt_argc
000014dc g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00021664 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001570 g     F .text	00000050 alt_ic_isr_register
00021690 g       *ABS*	00000000 _edata
000217b0 g       *ABS*	00000000 _end
00000244 g       *ABS*	00000000 __ram_exceptions_end
00000a68 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00001648 g     F .text	0000008c alt_ic_irq_disable
0000214c g     F .text	00000038 exit
000026fc g     F .text	00000074 .hidden __modsi3
0003d4c0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000282c g     F .text	00000034 _exit
00000f98 g     F .text	0000012c alt_alarm_start
00002348 g     F .text	00000098 strlen
00001a50 g     F .text	00000154 open
0000153c g     F .text	00000034 alt_icache_flush_all
0002167c g     O .rwdata	00000004 alt_priority_mask
000015c0 g     F .text	00000088 alt_ic_irq_enable
00021680 g     O .rwdata	00000008 alt_alarm_list
0000147c g     F .text	00000060 _do_ctors
00001258 g     F .text	000000d0 close
0000034c g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	1085ac04 	addi	r2,r2,5808
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	1085ac04 	addi	r2,r2,5808
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a01117 	ldw	r2,-32700(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a01117 	ldw	r2,-32700(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	def53014 	ori	sp,sp,54464
    movhi gp, %hi(_gp)
     25c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     260:	d6a59914 	ori	gp,gp,38500
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     268:	1085a414 	ori	r2,r2,5776

    movhi r3, %hi(__bss_end)
     26c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     270:	18c5ec14 	ori	r3,r3,6064

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000034c0 	call	34c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00003d00 	call	3d0 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <main>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int main(void){
     290:	defffd04 	addi	sp,sp,-12
     294:	dfc00215 	stw	ra,8(sp)
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4
  unsigned int led = 0;
     2a0:	e03fff15 	stw	zero,-4(fp)

//  printf("Embarcados++ \n");

  while(1){
      if (led <= 5){
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	108001a8 	cmpgeui	r2,r2,6
     2ac:	10000b1e 	bne	r2,zero,2dc <main+0x4c>
          IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led++);
     2b0:	e0bfff17 	ldw	r2,-4(fp)
     2b4:	10c00044 	addi	r3,r2,1
     2b8:	e0ffff15 	stw	r3,-4(fp)
     2bc:	00c00044 	movi	r3,1
     2c0:	1886983a 	sll	r3,r3,r2
     2c4:	00800174 	movhi	r2,5
     2c8:	10840404 	addi	r2,r2,4112
     2cc:	10c00035 	stwio	r3,0(r2)
          usleep(50000);
     2d0:	0130d414 	movui	r4,50000
     2d4:	000044c0 	call	44c <usleep>
     2d8:	003ff206 	br	2a4 <main+0x14>
      }
      else{
          led = 0;
     2dc:	e03fff15 	stw	zero,-4(fp)
      }
  };
     2e0:	003ff006 	br	2a4 <main+0x14>

000002e4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     2e4:	defffc04 	addi	sp,sp,-16
     2e8:	df000315 	stw	fp,12(sp)
     2ec:	df000304 	addi	fp,sp,12
     2f0:	e13ffd15 	stw	r4,-12(fp)
     2f4:	e17ffe15 	stw	r5,-8(fp)
     2f8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     2fc:	e0fffe17 	ldw	r3,-8(fp)
     300:	e0bffd17 	ldw	r2,-12(fp)
     304:	18800c26 	beq	r3,r2,338 <alt_load_section+0x54>
  {
    while( to != end )
     308:	00000806 	br	32c <alt_load_section+0x48>
    {
      *to++ = *from++;
     30c:	e0bffe17 	ldw	r2,-8(fp)
     310:	10c00104 	addi	r3,r2,4
     314:	e0fffe15 	stw	r3,-8(fp)
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	19000104 	addi	r4,r3,4
     320:	e13ffd15 	stw	r4,-12(fp)
     324:	18c00017 	ldw	r3,0(r3)
     328:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     32c:	e0fffe17 	ldw	r3,-8(fp)
     330:	e0bfff17 	ldw	r2,-4(fp)
     334:	18bff51e 	bne	r3,r2,30c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     338:	0001883a 	nop
     33c:	e037883a 	mov	sp,fp
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00104 	addi	sp,sp,4
     348:	f800283a 	ret

0000034c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     34c:	defffe04 	addi	sp,sp,-8
     350:	dfc00115 	stw	ra,4(sp)
     354:	df000015 	stw	fp,0(sp)
     358:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     35c:	018000b4 	movhi	r6,2
     360:	3185a404 	addi	r6,r6,5776
     364:	014000b4 	movhi	r5,2
     368:	29400e04 	addi	r5,r5,56
     36c:	01000034 	movhi	r4,0
     370:	210a1804 	addi	r4,r4,10336
     374:	00002e40 	call	2e4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     378:	01800034 	movhi	r6,0
     37c:	31809104 	addi	r6,r6,580
     380:	01400034 	movhi	r5,0
     384:	29400804 	addi	r5,r5,32
     388:	01000034 	movhi	r4,0
     38c:	21000804 	addi	r4,r4,32
     390:	00002e40 	call	2e4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     394:	018000b4 	movhi	r6,2
     398:	31800e04 	addi	r6,r6,56
     39c:	014000b4 	movhi	r5,2
     3a0:	29400004 	addi	r5,r5,0
     3a4:	010000b4 	movhi	r4,2
     3a8:	21000004 	addi	r4,r4,0
     3ac:	00002e40 	call	2e4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     3b0:	00013280 	call	1328 <alt_dcache_flush_all>
  alt_icache_flush_all();
     3b4:	000153c0 	call	153c <alt_icache_flush_all>
}
     3b8:	0001883a 	nop
     3bc:	e037883a 	mov	sp,fp
     3c0:	dfc00117 	ldw	ra,4(sp)
     3c4:	df000017 	ldw	fp,0(sp)
     3c8:	dec00204 	addi	sp,sp,8
     3cc:	f800283a 	ret

000003d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     3d0:	defffd04 	addi	sp,sp,-12
     3d4:	dfc00215 	stw	ra,8(sp)
     3d8:	df000115 	stw	fp,4(sp)
     3dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     3e0:	0009883a 	mov	r4,zero
     3e4:	00004b00 	call	4b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     3e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     3ec:	00004e80 	call	4e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     3f0:	018000b4 	movhi	r6,2
     3f4:	31800004 	addi	r6,r6,0
     3f8:	014000b4 	movhi	r5,2
     3fc:	29400004 	addi	r5,r5,0
     400:	010000b4 	movhi	r4,2
     404:	21000004 	addi	r4,r4,0
     408:	00018d40 	call	18d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     40c:	000147c0 	call	147c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     410:	01000034 	movhi	r4,0
     414:	21053704 	addi	r4,r4,5340
     418:	00021380 	call	2138 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     41c:	d0a00b17 	ldw	r2,-32724(gp)
     420:	d0e00c17 	ldw	r3,-32720(gp)
     424:	d1200d17 	ldw	r4,-32716(gp)
     428:	200d883a 	mov	r6,r4
     42c:	180b883a 	mov	r5,r3
     430:	1009883a 	mov	r4,r2
     434:	00002900 	call	290 <main>
     438:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     43c:	01000044 	movi	r4,1
     440:	00012580 	call	1258 <close>
  exit (result);
     444:	e13fff17 	ldw	r4,-4(fp)
     448:	000214c0 	call	214c <exit>

0000044c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     44c:	defffd04 	addi	sp,sp,-12
     450:	dfc00215 	stw	ra,8(sp)
     454:	df000115 	stw	fp,4(sp)
     458:	df000104 	addi	fp,sp,4
     45c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
     460:	e13fff17 	ldw	r4,-4(fp)
     464:	00010c40 	call	10c4 <alt_busy_sleep>
}
     468:	e037883a 	mov	sp,fp
     46c:	dfc00117 	ldw	ra,4(sp)
     470:	df000017 	ldw	fp,0(sp)
     474:	dec00204 	addi	sp,sp,8
     478:	f800283a 	ret

0000047c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     47c:	defffd04 	addi	sp,sp,-12
     480:	dfc00215 	stw	ra,8(sp)
     484:	df000115 	stw	fp,4(sp)
     488:	df000104 	addi	fp,sp,4
     48c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     490:	d1600204 	addi	r5,gp,-32760
     494:	e13fff17 	ldw	r4,-4(fp)
     498:	00013d80 	call	13d8 <alt_dev_llist_insert>
}
     49c:	e037883a 	mov	sp,fp
     4a0:	dfc00117 	ldw	ra,4(sp)
     4a4:	df000017 	ldw	fp,0(sp)
     4a8:	dec00204 	addi	sp,sp,8
     4ac:	f800283a 	ret

000004b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     4b0:	defffd04 	addi	sp,sp,-12
     4b4:	dfc00215 	stw	ra,8(sp)
     4b8:	df000115 	stw	fp,4(sp)
     4bc:	df000104 	addi	fp,sp,4
     4c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
     4c4:	0001dac0 	call	1dac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     4c8:	00800044 	movi	r2,1
     4cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     4d0:	0001883a 	nop
     4d4:	e037883a 	mov	sp,fp
     4d8:	dfc00117 	ldw	ra,4(sp)
     4dc:	df000017 	ldw	fp,0(sp)
     4e0:	dec00204 	addi	sp,sp,8
     4e4:	f800283a 	ret

000004e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     4e8:	defffe04 	addi	sp,sp,-8
     4ec:	dfc00115 	stw	ra,4(sp)
     4f0:	df000015 	stw	fp,0(sp)
     4f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     4f8:	000d883a 	mov	r6,zero
     4fc:	000b883a 	mov	r5,zero
     500:	010000b4 	movhi	r4,2
     504:	21001804 	addi	r4,r4,96
     508:	00006940 	call	694 <altera_avalon_jtag_uart_init>
     50c:	010000b4 	movhi	r4,2
     510:	21000e04 	addi	r4,r4,56
     514:	000047c0 	call	47c <alt_dev_reg>
}
     518:	0001883a 	nop
     51c:	e037883a 	mov	sp,fp
     520:	dfc00117 	ldw	ra,4(sp)
     524:	df000017 	ldw	fp,0(sp)
     528:	dec00204 	addi	sp,sp,8
     52c:	f800283a 	ret

00000530 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     530:	defffa04 	addi	sp,sp,-24
     534:	dfc00515 	stw	ra,20(sp)
     538:	df000415 	stw	fp,16(sp)
     53c:	df000404 	addi	fp,sp,16
     540:	e13ffd15 	stw	r4,-12(fp)
     544:	e17ffe15 	stw	r5,-8(fp)
     548:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     54c:	e0bffd17 	ldw	r2,-12(fp)
     550:	10800017 	ldw	r2,0(r2)
     554:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     558:	e0bffc17 	ldw	r2,-16(fp)
     55c:	10c00a04 	addi	r3,r2,40
     560:	e0bffd17 	ldw	r2,-12(fp)
     564:	10800217 	ldw	r2,8(r2)
     568:	100f883a 	mov	r7,r2
     56c:	e1bfff17 	ldw	r6,-4(fp)
     570:	e17ffe17 	ldw	r5,-8(fp)
     574:	1809883a 	mov	r4,r3
     578:	0000b580 	call	b58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     57c:	e037883a 	mov	sp,fp
     580:	dfc00117 	ldw	ra,4(sp)
     584:	df000017 	ldw	fp,0(sp)
     588:	dec00204 	addi	sp,sp,8
     58c:	f800283a 	ret

00000590 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     590:	defffa04 	addi	sp,sp,-24
     594:	dfc00515 	stw	ra,20(sp)
     598:	df000415 	stw	fp,16(sp)
     59c:	df000404 	addi	fp,sp,16
     5a0:	e13ffd15 	stw	r4,-12(fp)
     5a4:	e17ffe15 	stw	r5,-8(fp)
     5a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     5ac:	e0bffd17 	ldw	r2,-12(fp)
     5b0:	10800017 	ldw	r2,0(r2)
     5b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     5b8:	e0bffc17 	ldw	r2,-16(fp)
     5bc:	10c00a04 	addi	r3,r2,40
     5c0:	e0bffd17 	ldw	r2,-12(fp)
     5c4:	10800217 	ldw	r2,8(r2)
     5c8:	100f883a 	mov	r7,r2
     5cc:	e1bfff17 	ldw	r6,-4(fp)
     5d0:	e17ffe17 	ldw	r5,-8(fp)
     5d4:	1809883a 	mov	r4,r3
     5d8:	0000d740 	call	d74 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     5dc:	e037883a 	mov	sp,fp
     5e0:	dfc00117 	ldw	ra,4(sp)
     5e4:	df000017 	ldw	fp,0(sp)
     5e8:	dec00204 	addi	sp,sp,8
     5ec:	f800283a 	ret

000005f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     5f0:	defffc04 	addi	sp,sp,-16
     5f4:	dfc00315 	stw	ra,12(sp)
     5f8:	df000215 	stw	fp,8(sp)
     5fc:	df000204 	addi	fp,sp,8
     600:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     604:	e0bfff17 	ldw	r2,-4(fp)
     608:	10800017 	ldw	r2,0(r2)
     60c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     610:	e0bffe17 	ldw	r2,-8(fp)
     614:	10c00a04 	addi	r3,r2,40
     618:	e0bfff17 	ldw	r2,-4(fp)
     61c:	10800217 	ldw	r2,8(r2)
     620:	100b883a 	mov	r5,r2
     624:	1809883a 	mov	r4,r3
     628:	0000a000 	call	a00 <altera_avalon_jtag_uart_close>
}
     62c:	e037883a 	mov	sp,fp
     630:	dfc00117 	ldw	ra,4(sp)
     634:	df000017 	ldw	fp,0(sp)
     638:	dec00204 	addi	sp,sp,8
     63c:	f800283a 	ret

00000640 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     640:	defffa04 	addi	sp,sp,-24
     644:	dfc00515 	stw	ra,20(sp)
     648:	df000415 	stw	fp,16(sp)
     64c:	df000404 	addi	fp,sp,16
     650:	e13ffd15 	stw	r4,-12(fp)
     654:	e17ffe15 	stw	r5,-8(fp)
     658:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     65c:	e0bffd17 	ldw	r2,-12(fp)
     660:	10800017 	ldw	r2,0(r2)
     664:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     668:	e0bffc17 	ldw	r2,-16(fp)
     66c:	10800a04 	addi	r2,r2,40
     670:	e1bfff17 	ldw	r6,-4(fp)
     674:	e17ffe17 	ldw	r5,-8(fp)
     678:	1009883a 	mov	r4,r2
     67c:	0000a680 	call	a68 <altera_avalon_jtag_uart_ioctl>
}
     680:	e037883a 	mov	sp,fp
     684:	dfc00117 	ldw	ra,4(sp)
     688:	df000017 	ldw	fp,0(sp)
     68c:	dec00204 	addi	sp,sp,8
     690:	f800283a 	ret

00000694 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     694:	defffa04 	addi	sp,sp,-24
     698:	dfc00515 	stw	ra,20(sp)
     69c:	df000415 	stw	fp,16(sp)
     6a0:	df000404 	addi	fp,sp,16
     6a4:	e13ffd15 	stw	r4,-12(fp)
     6a8:	e17ffe15 	stw	r5,-8(fp)
     6ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     6b0:	e0bffd17 	ldw	r2,-12(fp)
     6b4:	00c00044 	movi	r3,1
     6b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     6bc:	e0bffd17 	ldw	r2,-12(fp)
     6c0:	10800017 	ldw	r2,0(r2)
     6c4:	10800104 	addi	r2,r2,4
     6c8:	1007883a 	mov	r3,r2
     6cc:	e0bffd17 	ldw	r2,-12(fp)
     6d0:	10800817 	ldw	r2,32(r2)
     6d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     6d8:	e0bffe17 	ldw	r2,-8(fp)
     6dc:	e0ffff17 	ldw	r3,-4(fp)
     6e0:	d8000015 	stw	zero,0(sp)
     6e4:	e1fffd17 	ldw	r7,-12(fp)
     6e8:	01800034 	movhi	r6,0
     6ec:	3181d504 	addi	r6,r6,1876
     6f0:	180b883a 	mov	r5,r3
     6f4:	1009883a 	mov	r4,r2
     6f8:	00015700 	call	1570 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     6fc:	e0bffd17 	ldw	r2,-12(fp)
     700:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     704:	e0bffd17 	ldw	r2,-12(fp)
     708:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     70c:	d0e00f17 	ldw	r3,-32708(gp)
     710:	e1fffd17 	ldw	r7,-12(fp)
     714:	01800034 	movhi	r6,0
     718:	31825804 	addi	r6,r6,2400
     71c:	180b883a 	mov	r5,r3
     720:	1009883a 	mov	r4,r2
     724:	0000f980 	call	f98 <alt_alarm_start>
     728:	1000040e 	bge	r2,zero,73c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     72c:	e0fffd17 	ldw	r3,-12(fp)
     730:	00a00034 	movhi	r2,32768
     734:	10bfffc4 	addi	r2,r2,-1
     738:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     73c:	0001883a 	nop
     740:	e037883a 	mov	sp,fp
     744:	dfc00117 	ldw	ra,4(sp)
     748:	df000017 	ldw	fp,0(sp)
     74c:	dec00204 	addi	sp,sp,8
     750:	f800283a 	ret

00000754 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     754:	defff804 	addi	sp,sp,-32
     758:	df000715 	stw	fp,28(sp)
     75c:	df000704 	addi	fp,sp,28
     760:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     764:	e0bfff17 	ldw	r2,-4(fp)
     768:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
     76c:	e0bffb17 	ldw	r2,-20(fp)
     770:	10800017 	ldw	r2,0(r2)
     774:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     778:	e0bffc17 	ldw	r2,-16(fp)
     77c:	10800104 	addi	r2,r2,4
     780:	10800037 	ldwio	r2,0(r2)
     784:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     788:	e0bffd17 	ldw	r2,-12(fp)
     78c:	1080c00c 	andi	r2,r2,768
     790:	10006d26 	beq	r2,zero,948 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     794:	e0bffd17 	ldw	r2,-12(fp)
     798:	1080400c 	andi	r2,r2,256
     79c:	10003526 	beq	r2,zero,874 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     7a0:	00800074 	movhi	r2,1
     7a4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     7a8:	e0bffb17 	ldw	r2,-20(fp)
     7ac:	10800a17 	ldw	r2,40(r2)
     7b0:	10800044 	addi	r2,r2,1
     7b4:	1081ffcc 	andi	r2,r2,2047
     7b8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
     7bc:	e0bffb17 	ldw	r2,-20(fp)
     7c0:	10c00b17 	ldw	r3,44(r2)
     7c4:	e0bffe17 	ldw	r2,-8(fp)
     7c8:	18801526 	beq	r3,r2,820 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     7cc:	e0bffc17 	ldw	r2,-16(fp)
     7d0:	10800037 	ldwio	r2,0(r2)
     7d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     7d8:	e0bff917 	ldw	r2,-28(fp)
     7dc:	10a0000c 	andi	r2,r2,32768
     7e0:	10001126 	beq	r2,zero,828 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     7e4:	e0bffb17 	ldw	r2,-20(fp)
     7e8:	10800a17 	ldw	r2,40(r2)
     7ec:	e0fff917 	ldw	r3,-28(fp)
     7f0:	1809883a 	mov	r4,r3
     7f4:	e0fffb17 	ldw	r3,-20(fp)
     7f8:	1885883a 	add	r2,r3,r2
     7fc:	10800e04 	addi	r2,r2,56
     800:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     804:	e0bffb17 	ldw	r2,-20(fp)
     808:	10800a17 	ldw	r2,40(r2)
     80c:	10800044 	addi	r2,r2,1
     810:	10c1ffcc 	andi	r3,r2,2047
     814:	e0bffb17 	ldw	r2,-20(fp)
     818:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     81c:	003fe206 	br	7a8 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
     820:	0001883a 	nop
     824:	00000106 	br	82c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
     828:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     82c:	e0bff917 	ldw	r2,-28(fp)
     830:	10bfffec 	andhi	r2,r2,65535
     834:	10000f26 	beq	r2,zero,874 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     838:	e0bffb17 	ldw	r2,-20(fp)
     83c:	10c00817 	ldw	r3,32(r2)
     840:	00bfff84 	movi	r2,-2
     844:	1886703a 	and	r3,r3,r2
     848:	e0bffb17 	ldw	r2,-20(fp)
     84c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     850:	e0bffc17 	ldw	r2,-16(fp)
     854:	10800104 	addi	r2,r2,4
     858:	1007883a 	mov	r3,r2
     85c:	e0bffb17 	ldw	r2,-20(fp)
     860:	10800817 	ldw	r2,32(r2)
     864:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     868:	e0bffc17 	ldw	r2,-16(fp)
     86c:	10800104 	addi	r2,r2,4
     870:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     874:	e0bffd17 	ldw	r2,-12(fp)
     878:	1080800c 	andi	r2,r2,512
     87c:	103fbe26 	beq	r2,zero,778 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     880:	e0bffd17 	ldw	r2,-12(fp)
     884:	1004d43a 	srli	r2,r2,16
     888:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     88c:	00001406 	br	8e0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     890:	e0bffc17 	ldw	r2,-16(fp)
     894:	e0fffb17 	ldw	r3,-20(fp)
     898:	18c00d17 	ldw	r3,52(r3)
     89c:	e13ffb17 	ldw	r4,-20(fp)
     8a0:	20c7883a 	add	r3,r4,r3
     8a4:	18c20e04 	addi	r3,r3,2104
     8a8:	18c00003 	ldbu	r3,0(r3)
     8ac:	18c03fcc 	andi	r3,r3,255
     8b0:	18c0201c 	xori	r3,r3,128
     8b4:	18ffe004 	addi	r3,r3,-128
     8b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     8bc:	e0bffb17 	ldw	r2,-20(fp)
     8c0:	10800d17 	ldw	r2,52(r2)
     8c4:	10800044 	addi	r2,r2,1
     8c8:	10c1ffcc 	andi	r3,r2,2047
     8cc:	e0bffb17 	ldw	r2,-20(fp)
     8d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     8d4:	e0bffa17 	ldw	r2,-24(fp)
     8d8:	10bfffc4 	addi	r2,r2,-1
     8dc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     8e0:	e0bffa17 	ldw	r2,-24(fp)
     8e4:	10000526 	beq	r2,zero,8fc <altera_avalon_jtag_uart_irq+0x1a8>
     8e8:	e0bffb17 	ldw	r2,-20(fp)
     8ec:	10c00d17 	ldw	r3,52(r2)
     8f0:	e0bffb17 	ldw	r2,-20(fp)
     8f4:	10800c17 	ldw	r2,48(r2)
     8f8:	18bfe51e 	bne	r3,r2,890 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     8fc:	e0bffa17 	ldw	r2,-24(fp)
     900:	103f9d26 	beq	r2,zero,778 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     904:	e0bffb17 	ldw	r2,-20(fp)
     908:	10c00817 	ldw	r3,32(r2)
     90c:	00bfff44 	movi	r2,-3
     910:	1886703a 	and	r3,r3,r2
     914:	e0bffb17 	ldw	r2,-20(fp)
     918:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     91c:	e0bffb17 	ldw	r2,-20(fp)
     920:	10800017 	ldw	r2,0(r2)
     924:	10800104 	addi	r2,r2,4
     928:	1007883a 	mov	r3,r2
     92c:	e0bffb17 	ldw	r2,-20(fp)
     930:	10800817 	ldw	r2,32(r2)
     934:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     938:	e0bffc17 	ldw	r2,-16(fp)
     93c:	10800104 	addi	r2,r2,4
     940:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     944:	003f8c06 	br	778 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
     948:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
     94c:	0001883a 	nop
     950:	e037883a 	mov	sp,fp
     954:	df000017 	ldw	fp,0(sp)
     958:	dec00104 	addi	sp,sp,4
     95c:	f800283a 	ret

00000960 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     960:	defff804 	addi	sp,sp,-32
     964:	df000715 	stw	fp,28(sp)
     968:	df000704 	addi	fp,sp,28
     96c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     970:	e0bffb17 	ldw	r2,-20(fp)
     974:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     978:	e0bff917 	ldw	r2,-28(fp)
     97c:	10800017 	ldw	r2,0(r2)
     980:	10800104 	addi	r2,r2,4
     984:	10800037 	ldwio	r2,0(r2)
     988:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     98c:	e0bffa17 	ldw	r2,-24(fp)
     990:	1081000c 	andi	r2,r2,1024
     994:	10000b26 	beq	r2,zero,9c4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     998:	e0bff917 	ldw	r2,-28(fp)
     99c:	10800017 	ldw	r2,0(r2)
     9a0:	10800104 	addi	r2,r2,4
     9a4:	1007883a 	mov	r3,r2
     9a8:	e0bff917 	ldw	r2,-28(fp)
     9ac:	10800817 	ldw	r2,32(r2)
     9b0:	10810014 	ori	r2,r2,1024
     9b4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
     9b8:	e0bff917 	ldw	r2,-28(fp)
     9bc:	10000915 	stw	zero,36(r2)
     9c0:	00000a06 	br	9ec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     9c4:	e0bff917 	ldw	r2,-28(fp)
     9c8:	10c00917 	ldw	r3,36(r2)
     9cc:	00a00034 	movhi	r2,32768
     9d0:	10bfff04 	addi	r2,r2,-4
     9d4:	10c00536 	bltu	r2,r3,9ec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
     9d8:	e0bff917 	ldw	r2,-28(fp)
     9dc:	10800917 	ldw	r2,36(r2)
     9e0:	10c00044 	addi	r3,r2,1
     9e4:	e0bff917 	ldw	r2,-28(fp)
     9e8:	10c00915 	stw	r3,36(r2)
     9ec:	d0a00f17 	ldw	r2,-32708(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     9f0:	e037883a 	mov	sp,fp
     9f4:	df000017 	ldw	fp,0(sp)
     9f8:	dec00104 	addi	sp,sp,4
     9fc:	f800283a 	ret

00000a00 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     a00:	defffd04 	addi	sp,sp,-12
     a04:	df000215 	stw	fp,8(sp)
     a08:	df000204 	addi	fp,sp,8
     a0c:	e13ffe15 	stw	r4,-8(fp)
     a10:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a14:	00000506 	br	a2c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
     a18:	e0bfff17 	ldw	r2,-4(fp)
     a1c:	1090000c 	andi	r2,r2,16384
     a20:	10000226 	beq	r2,zero,a2c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
     a24:	00bffd44 	movi	r2,-11
     a28:	00000b06 	br	a58 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     a2c:	e0bffe17 	ldw	r2,-8(fp)
     a30:	10c00d17 	ldw	r3,52(r2)
     a34:	e0bffe17 	ldw	r2,-8(fp)
     a38:	10800c17 	ldw	r2,48(r2)
     a3c:	18800526 	beq	r3,r2,a54 <altera_avalon_jtag_uart_close+0x54>
     a40:	e0bffe17 	ldw	r2,-8(fp)
     a44:	10c00917 	ldw	r3,36(r2)
     a48:	e0bffe17 	ldw	r2,-8(fp)
     a4c:	10800117 	ldw	r2,4(r2)
     a50:	18bff136 	bltu	r3,r2,a18 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     a54:	0005883a 	mov	r2,zero
}
     a58:	e037883a 	mov	sp,fp
     a5c:	df000017 	ldw	fp,0(sp)
     a60:	dec00104 	addi	sp,sp,4
     a64:	f800283a 	ret

00000a68 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     a68:	defffa04 	addi	sp,sp,-24
     a6c:	df000515 	stw	fp,20(sp)
     a70:	df000504 	addi	fp,sp,20
     a74:	e13ffd15 	stw	r4,-12(fp)
     a78:	e17ffe15 	stw	r5,-8(fp)
     a7c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
     a80:	00bff9c4 	movi	r2,-25
     a84:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
     a88:	e0bffe17 	ldw	r2,-8(fp)
     a8c:	10da8060 	cmpeqi	r3,r2,27137
     a90:	1800031e 	bne	r3,zero,aa0 <altera_avalon_jtag_uart_ioctl+0x38>
     a94:	109a80a0 	cmpeqi	r2,r2,27138
     a98:	1000181e 	bne	r2,zero,afc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
     a9c:	00002906 	br	b44 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     aa0:	e0bffd17 	ldw	r2,-12(fp)
     aa4:	10c00117 	ldw	r3,4(r2)
     aa8:	00a00034 	movhi	r2,32768
     aac:	10bfffc4 	addi	r2,r2,-1
     ab0:	18802126 	beq	r3,r2,b38 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	10800017 	ldw	r2,0(r2)
     abc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     ac0:	e0bffc17 	ldw	r2,-16(fp)
     ac4:	10800090 	cmplti	r2,r2,2
     ac8:	1000061e 	bne	r2,zero,ae4 <altera_avalon_jtag_uart_ioctl+0x7c>
     acc:	e0fffc17 	ldw	r3,-16(fp)
     ad0:	00a00034 	movhi	r2,32768
     ad4:	10bfffc4 	addi	r2,r2,-1
     ad8:	18800226 	beq	r3,r2,ae4 <altera_avalon_jtag_uart_ioctl+0x7c>
     adc:	e0bffc17 	ldw	r2,-16(fp)
     ae0:	00000206 	br	aec <altera_avalon_jtag_uart_ioctl+0x84>
     ae4:	00a00034 	movhi	r2,32768
     ae8:	10bfff84 	addi	r2,r2,-2
     aec:	e0fffd17 	ldw	r3,-12(fp)
     af0:	18800115 	stw	r2,4(r3)
      rc = 0;
     af4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     af8:	00000f06 	br	b38 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     afc:	e0bffd17 	ldw	r2,-12(fp)
     b00:	10c00117 	ldw	r3,4(r2)
     b04:	00a00034 	movhi	r2,32768
     b08:	10bfffc4 	addi	r2,r2,-1
     b0c:	18800c26 	beq	r3,r2,b40 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     b10:	e0bffd17 	ldw	r2,-12(fp)
     b14:	10c00917 	ldw	r3,36(r2)
     b18:	e0bffd17 	ldw	r2,-12(fp)
     b1c:	10800117 	ldw	r2,4(r2)
     b20:	1885803a 	cmpltu	r2,r3,r2
     b24:	10c03fcc 	andi	r3,r2,255
     b28:	e0bfff17 	ldw	r2,-4(fp)
     b2c:	10c00015 	stw	r3,0(r2)
      rc = 0;
     b30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
     b34:	00000206 	br	b40 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
     b38:	0001883a 	nop
     b3c:	00000106 	br	b44 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
     b40:	0001883a 	nop

  default:
    break;
  }

  return rc;
     b44:	e0bffb17 	ldw	r2,-20(fp)
}
     b48:	e037883a 	mov	sp,fp
     b4c:	df000017 	ldw	fp,0(sp)
     b50:	dec00104 	addi	sp,sp,4
     b54:	f800283a 	ret

00000b58 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     b58:	defff304 	addi	sp,sp,-52
     b5c:	dfc00c15 	stw	ra,48(sp)
     b60:	df000b15 	stw	fp,44(sp)
     b64:	df000b04 	addi	fp,sp,44
     b68:	e13ffc15 	stw	r4,-16(fp)
     b6c:	e17ffd15 	stw	r5,-12(fp)
     b70:	e1bffe15 	stw	r6,-8(fp)
     b74:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
     b78:	e0bffd17 	ldw	r2,-12(fp)
     b7c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     b80:	00004706 	br	ca0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     b84:	e0bffc17 	ldw	r2,-16(fp)
     b88:	10800a17 	ldw	r2,40(r2)
     b8c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     b90:	e0bffc17 	ldw	r2,-16(fp)
     b94:	10800b17 	ldw	r2,44(r2)
     b98:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
     b9c:	e0fff717 	ldw	r3,-36(fp)
     ba0:	e0bff817 	ldw	r2,-32(fp)
     ba4:	18800536 	bltu	r3,r2,bbc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     ba8:	e0fff717 	ldw	r3,-36(fp)
     bac:	e0bff817 	ldw	r2,-32(fp)
     bb0:	1885c83a 	sub	r2,r3,r2
     bb4:	e0bff615 	stw	r2,-40(fp)
     bb8:	00000406 	br	bcc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     bbc:	00c20004 	movi	r3,2048
     bc0:	e0bff817 	ldw	r2,-32(fp)
     bc4:	1885c83a 	sub	r2,r3,r2
     bc8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     bcc:	e0bff617 	ldw	r2,-40(fp)
     bd0:	10001e26 	beq	r2,zero,c4c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
     bd4:	e0fffe17 	ldw	r3,-8(fp)
     bd8:	e0bff617 	ldw	r2,-40(fp)
     bdc:	1880022e 	bgeu	r3,r2,be8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
     be0:	e0bffe17 	ldw	r2,-8(fp)
     be4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     be8:	e0bffc17 	ldw	r2,-16(fp)
     bec:	10c00e04 	addi	r3,r2,56
     bf0:	e0bff817 	ldw	r2,-32(fp)
     bf4:	1885883a 	add	r2,r3,r2
     bf8:	e1bff617 	ldw	r6,-40(fp)
     bfc:	100b883a 	mov	r5,r2
     c00:	e13ff517 	ldw	r4,-44(fp)
     c04:	00022000 	call	2200 <memcpy>
      ptr   += n;
     c08:	e0fff517 	ldw	r3,-44(fp)
     c0c:	e0bff617 	ldw	r2,-40(fp)
     c10:	1885883a 	add	r2,r3,r2
     c14:	e0bff515 	stw	r2,-44(fp)
      space -= n;
     c18:	e0fffe17 	ldw	r3,-8(fp)
     c1c:	e0bff617 	ldw	r2,-40(fp)
     c20:	1885c83a 	sub	r2,r3,r2
     c24:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c28:	e0fff817 	ldw	r3,-32(fp)
     c2c:	e0bff617 	ldw	r2,-40(fp)
     c30:	1885883a 	add	r2,r3,r2
     c34:	10c1ffcc 	andi	r3,r2,2047
     c38:	e0bffc17 	ldw	r2,-16(fp)
     c3c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     c40:	e0bffe17 	ldw	r2,-8(fp)
     c44:	00bfcf16 	blt	zero,r2,b84 <altera_avalon_jtag_uart_read+0x2c>
     c48:	00000106 	br	c50 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
     c4c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
     c50:	e0fff517 	ldw	r3,-44(fp)
     c54:	e0bffd17 	ldw	r2,-12(fp)
     c58:	1880141e 	bne	r3,r2,cac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     c5c:	e0bfff17 	ldw	r2,-4(fp)
     c60:	1090000c 	andi	r2,r2,16384
     c64:	1000131e 	bne	r2,zero,cb4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     c68:	0001883a 	nop
     c6c:	e0bffc17 	ldw	r2,-16(fp)
     c70:	10c00a17 	ldw	r3,40(r2)
     c74:	e0bff717 	ldw	r2,-36(fp)
     c78:	1880051e 	bne	r3,r2,c90 <altera_avalon_jtag_uart_read+0x138>
     c7c:	e0bffc17 	ldw	r2,-16(fp)
     c80:	10c00917 	ldw	r3,36(r2)
     c84:	e0bffc17 	ldw	r2,-16(fp)
     c88:	10800117 	ldw	r2,4(r2)
     c8c:	18bff736 	bltu	r3,r2,c6c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     c90:	e0bffc17 	ldw	r2,-16(fp)
     c94:	10c00a17 	ldw	r3,40(r2)
     c98:	e0bff717 	ldw	r2,-36(fp)
     c9c:	18800726 	beq	r3,r2,cbc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     ca0:	e0bffe17 	ldw	r2,-8(fp)
     ca4:	00bfb716 	blt	zero,r2,b84 <altera_avalon_jtag_uart_read+0x2c>
     ca8:	00000506 	br	cc0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
     cac:	0001883a 	nop
     cb0:	00000306 	br	cc0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
     cb4:	0001883a 	nop
     cb8:	00000106 	br	cc0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
     cbc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     cc0:	e0fff517 	ldw	r3,-44(fp)
     cc4:	e0bffd17 	ldw	r2,-12(fp)
     cc8:	18801826 	beq	r3,r2,d2c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     ccc:	0005303a 	rdctl	r2,status
     cd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     cd4:	e0fffb17 	ldw	r3,-20(fp)
     cd8:	00bfff84 	movi	r2,-2
     cdc:	1884703a 	and	r2,r3,r2
     ce0:	1001703a 	wrctl	status,r2
  
  return context;
     ce4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     ce8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     cec:	e0bffc17 	ldw	r2,-16(fp)
     cf0:	10800817 	ldw	r2,32(r2)
     cf4:	10c00054 	ori	r3,r2,1
     cf8:	e0bffc17 	ldw	r2,-16(fp)
     cfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     d00:	e0bffc17 	ldw	r2,-16(fp)
     d04:	10800017 	ldw	r2,0(r2)
     d08:	10800104 	addi	r2,r2,4
     d0c:	1007883a 	mov	r3,r2
     d10:	e0bffc17 	ldw	r2,-16(fp)
     d14:	10800817 	ldw	r2,32(r2)
     d18:	18800035 	stwio	r2,0(r3)
     d1c:	e0bffa17 	ldw	r2,-24(fp)
     d20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d24:	e0bff917 	ldw	r2,-28(fp)
     d28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     d2c:	e0fff517 	ldw	r3,-44(fp)
     d30:	e0bffd17 	ldw	r2,-12(fp)
     d34:	18800426 	beq	r3,r2,d48 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
     d38:	e0fff517 	ldw	r3,-44(fp)
     d3c:	e0bffd17 	ldw	r2,-12(fp)
     d40:	1885c83a 	sub	r2,r3,r2
     d44:	00000606 	br	d60 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
     d48:	e0bfff17 	ldw	r2,-4(fp)
     d4c:	1090000c 	andi	r2,r2,16384
     d50:	10000226 	beq	r2,zero,d5c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
     d54:	00bffd44 	movi	r2,-11
     d58:	00000106 	br	d60 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
     d5c:	00bffec4 	movi	r2,-5
}
     d60:	e037883a 	mov	sp,fp
     d64:	dfc00117 	ldw	ra,4(sp)
     d68:	df000017 	ldw	fp,0(sp)
     d6c:	dec00204 	addi	sp,sp,8
     d70:	f800283a 	ret

00000d74 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     d74:	defff304 	addi	sp,sp,-52
     d78:	dfc00c15 	stw	ra,48(sp)
     d7c:	df000b15 	stw	fp,44(sp)
     d80:	df000b04 	addi	fp,sp,44
     d84:	e13ffc15 	stw	r4,-16(fp)
     d88:	e17ffd15 	stw	r5,-12(fp)
     d8c:	e1bffe15 	stw	r6,-8(fp)
     d90:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     d94:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     d98:	e0bffd17 	ldw	r2,-12(fp)
     d9c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     da0:	00003706 	br	e80 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     da4:	e0bffc17 	ldw	r2,-16(fp)
     da8:	10800c17 	ldw	r2,48(r2)
     dac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
     db0:	e0bffc17 	ldw	r2,-16(fp)
     db4:	10800d17 	ldw	r2,52(r2)
     db8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
     dbc:	e0fff917 	ldw	r3,-28(fp)
     dc0:	e0bff517 	ldw	r2,-44(fp)
     dc4:	1880062e 	bgeu	r3,r2,de0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     dc8:	e0fff517 	ldw	r3,-44(fp)
     dcc:	e0bff917 	ldw	r2,-28(fp)
     dd0:	1885c83a 	sub	r2,r3,r2
     dd4:	10bfffc4 	addi	r2,r2,-1
     dd8:	e0bff615 	stw	r2,-40(fp)
     ddc:	00000b06 	br	e0c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
     de0:	e0bff517 	ldw	r2,-44(fp)
     de4:	10000526 	beq	r2,zero,dfc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     de8:	00c20004 	movi	r3,2048
     dec:	e0bff917 	ldw	r2,-28(fp)
     df0:	1885c83a 	sub	r2,r3,r2
     df4:	e0bff615 	stw	r2,-40(fp)
     df8:	00000406 	br	e0c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     dfc:	00c1ffc4 	movi	r3,2047
     e00:	e0bff917 	ldw	r2,-28(fp)
     e04:	1885c83a 	sub	r2,r3,r2
     e08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
     e0c:	e0bff617 	ldw	r2,-40(fp)
     e10:	10001e26 	beq	r2,zero,e8c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
     e14:	e0fffe17 	ldw	r3,-8(fp)
     e18:	e0bff617 	ldw	r2,-40(fp)
     e1c:	1880022e 	bgeu	r3,r2,e28 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
     e20:	e0bffe17 	ldw	r2,-8(fp)
     e24:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
     e28:	e0bffc17 	ldw	r2,-16(fp)
     e2c:	10c20e04 	addi	r3,r2,2104
     e30:	e0bff917 	ldw	r2,-28(fp)
     e34:	1885883a 	add	r2,r3,r2
     e38:	e1bff617 	ldw	r6,-40(fp)
     e3c:	e17ffd17 	ldw	r5,-12(fp)
     e40:	1009883a 	mov	r4,r2
     e44:	00022000 	call	2200 <memcpy>
      ptr   += n;
     e48:	e0fffd17 	ldw	r3,-12(fp)
     e4c:	e0bff617 	ldw	r2,-40(fp)
     e50:	1885883a 	add	r2,r3,r2
     e54:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
     e58:	e0fffe17 	ldw	r3,-8(fp)
     e5c:	e0bff617 	ldw	r2,-40(fp)
     e60:	1885c83a 	sub	r2,r3,r2
     e64:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     e68:	e0fff917 	ldw	r3,-28(fp)
     e6c:	e0bff617 	ldw	r2,-40(fp)
     e70:	1885883a 	add	r2,r3,r2
     e74:	10c1ffcc 	andi	r3,r2,2047
     e78:	e0bffc17 	ldw	r2,-16(fp)
     e7c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     e80:	e0bffe17 	ldw	r2,-8(fp)
     e84:	00bfc716 	blt	zero,r2,da4 <altera_avalon_jtag_uart_write+0x30>
     e88:	00000106 	br	e90 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
     e8c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     e90:	0005303a 	rdctl	r2,status
     e94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e98:	e0fffb17 	ldw	r3,-20(fp)
     e9c:	00bfff84 	movi	r2,-2
     ea0:	1884703a 	and	r2,r3,r2
     ea4:	1001703a 	wrctl	status,r2
  
  return context;
     ea8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
     eac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     eb0:	e0bffc17 	ldw	r2,-16(fp)
     eb4:	10800817 	ldw	r2,32(r2)
     eb8:	10c00094 	ori	r3,r2,2
     ebc:	e0bffc17 	ldw	r2,-16(fp)
     ec0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     ec4:	e0bffc17 	ldw	r2,-16(fp)
     ec8:	10800017 	ldw	r2,0(r2)
     ecc:	10800104 	addi	r2,r2,4
     ed0:	1007883a 	mov	r3,r2
     ed4:	e0bffc17 	ldw	r2,-16(fp)
     ed8:	10800817 	ldw	r2,32(r2)
     edc:	18800035 	stwio	r2,0(r3)
     ee0:	e0bffa17 	ldw	r2,-24(fp)
     ee4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     ee8:	e0bff817 	ldw	r2,-32(fp)
     eec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
     ef0:	e0bffe17 	ldw	r2,-8(fp)
     ef4:	0080100e 	bge	zero,r2,f38 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
     ef8:	e0bfff17 	ldw	r2,-4(fp)
     efc:	1090000c 	andi	r2,r2,16384
     f00:	1000101e 	bne	r2,zero,f44 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     f04:	0001883a 	nop
     f08:	e0bffc17 	ldw	r2,-16(fp)
     f0c:	10c00d17 	ldw	r3,52(r2)
     f10:	e0bff517 	ldw	r2,-44(fp)
     f14:	1880051e 	bne	r3,r2,f2c <altera_avalon_jtag_uart_write+0x1b8>
     f18:	e0bffc17 	ldw	r2,-16(fp)
     f1c:	10c00917 	ldw	r3,36(r2)
     f20:	e0bffc17 	ldw	r2,-16(fp)
     f24:	10800117 	ldw	r2,4(r2)
     f28:	18bff736 	bltu	r3,r2,f08 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
     f2c:	e0bffc17 	ldw	r2,-16(fp)
     f30:	10800917 	ldw	r2,36(r2)
     f34:	1000051e 	bne	r2,zero,f4c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
     f38:	e0bffe17 	ldw	r2,-8(fp)
     f3c:	00bfd016 	blt	zero,r2,e80 <altera_avalon_jtag_uart_write+0x10c>
     f40:	00000306 	br	f50 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
     f44:	0001883a 	nop
     f48:	00000106 	br	f50 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
     f4c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     f50:	e0fffd17 	ldw	r3,-12(fp)
     f54:	e0bff717 	ldw	r2,-36(fp)
     f58:	18800426 	beq	r3,r2,f6c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
     f5c:	e0fffd17 	ldw	r3,-12(fp)
     f60:	e0bff717 	ldw	r2,-36(fp)
     f64:	1885c83a 	sub	r2,r3,r2
     f68:	00000606 	br	f84 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
     f6c:	e0bfff17 	ldw	r2,-4(fp)
     f70:	1090000c 	andi	r2,r2,16384
     f74:	10000226 	beq	r2,zero,f80 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
     f78:	00bffd44 	movi	r2,-11
     f7c:	00000106 	br	f84 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
     f80:	00bffec4 	movi	r2,-5
}
     f84:	e037883a 	mov	sp,fp
     f88:	dfc00117 	ldw	ra,4(sp)
     f8c:	df000017 	ldw	fp,0(sp)
     f90:	dec00204 	addi	sp,sp,8
     f94:	f800283a 	ret

00000f98 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
     f98:	defff504 	addi	sp,sp,-44
     f9c:	df000a15 	stw	fp,40(sp)
     fa0:	df000a04 	addi	fp,sp,40
     fa4:	e13ffc15 	stw	r4,-16(fp)
     fa8:	e17ffd15 	stw	r5,-12(fp)
     fac:	e1bffe15 	stw	r6,-8(fp)
     fb0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
     fb4:	e03ff615 	stw	zero,-40(fp)
     fb8:	d0a00f17 	ldw	r2,-32708(gp)
  
  if (alt_ticks_per_second ())
     fbc:	10003c26 	beq	r2,zero,10b0 <alt_alarm_start+0x118>
  {
    if (alarm)
     fc0:	e0bffc17 	ldw	r2,-16(fp)
     fc4:	10003826 	beq	r2,zero,10a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
     fc8:	e0bffc17 	ldw	r2,-16(fp)
     fcc:	e0fffe17 	ldw	r3,-8(fp)
     fd0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
     fd4:	e0bffc17 	ldw	r2,-16(fp)
     fd8:	e0ffff17 	ldw	r3,-4(fp)
     fdc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     fe0:	0005303a 	rdctl	r2,status
     fe4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     fe8:	e0fff917 	ldw	r3,-28(fp)
     fec:	00bfff84 	movi	r2,-2
     ff0:	1884703a 	and	r2,r3,r2
     ff4:	1001703a 	wrctl	status,r2
  
  return context;
     ff8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
     ffc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1000:	d0a01017 	ldw	r2,-32704(gp)
      
      current_nticks = alt_nticks();
    1004:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1008:	e0fffd17 	ldw	r3,-12(fp)
    100c:	e0bff617 	ldw	r2,-40(fp)
    1010:	1885883a 	add	r2,r3,r2
    1014:	10c00044 	addi	r3,r2,1
    1018:	e0bffc17 	ldw	r2,-16(fp)
    101c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1020:	e0bffc17 	ldw	r2,-16(fp)
    1024:	10c00217 	ldw	r3,8(r2)
    1028:	e0bff617 	ldw	r2,-40(fp)
    102c:	1880042e 	bgeu	r3,r2,1040 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    1030:	e0bffc17 	ldw	r2,-16(fp)
    1034:	00c00044 	movi	r3,1
    1038:	10c00405 	stb	r3,16(r2)
    103c:	00000206 	br	1048 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    1040:	e0bffc17 	ldw	r2,-16(fp)
    1044:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1048:	e0bffc17 	ldw	r2,-16(fp)
    104c:	d0e00704 	addi	r3,gp,-32740
    1050:	e0fffa15 	stw	r3,-24(fp)
    1054:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1058:	e0bffb17 	ldw	r2,-20(fp)
    105c:	e0fffa17 	ldw	r3,-24(fp)
    1060:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1064:	e0bffa17 	ldw	r2,-24(fp)
    1068:	10c00017 	ldw	r3,0(r2)
    106c:	e0bffb17 	ldw	r2,-20(fp)
    1070:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1074:	e0bffa17 	ldw	r2,-24(fp)
    1078:	10800017 	ldw	r2,0(r2)
    107c:	e0fffb17 	ldw	r3,-20(fp)
    1080:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1084:	e0bffa17 	ldw	r2,-24(fp)
    1088:	e0fffb17 	ldw	r3,-20(fp)
    108c:	10c00015 	stw	r3,0(r2)
    1090:	e0bff817 	ldw	r2,-32(fp)
    1094:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1098:	e0bff717 	ldw	r2,-36(fp)
    109c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    10a0:	0005883a 	mov	r2,zero
    10a4:	00000306 	br	10b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    10a8:	00bffa84 	movi	r2,-22
    10ac:	00000106 	br	10b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    10b0:	00bfde84 	movi	r2,-134
  }
}
    10b4:	e037883a 	mov	sp,fp
    10b8:	df000017 	ldw	fp,0(sp)
    10bc:	dec00104 	addi	sp,sp,4
    10c0:	f800283a 	ret

000010c4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    10c4:	defffa04 	addi	sp,sp,-24
    10c8:	dfc00515 	stw	ra,20(sp)
    10cc:	df000415 	stw	fp,16(sp)
    10d0:	df000404 	addi	fp,sp,16
    10d4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    10d8:	008000c4 	movi	r2,3
    10dc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    10e0:	e0fffd17 	ldw	r3,-12(fp)
    10e4:	008003f4 	movhi	r2,15
    10e8:	10909004 	addi	r2,r2,16960
    10ec:	1885383a 	mul	r2,r3,r2
    10f0:	100b883a 	mov	r5,r2
    10f4:	0100bef4 	movhi	r4,763
    10f8:	213c2004 	addi	r4,r4,-3968
    10fc:	00027700 	call	2770 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1100:	100b883a 	mov	r5,r2
    1104:	01200034 	movhi	r4,32768
    1108:	213fffc4 	addi	r4,r4,-1
    110c:	00027700 	call	2770 <__udivsi3>
    1110:	100b883a 	mov	r5,r2
    1114:	e13fff17 	ldw	r4,-4(fp)
    1118:	00027700 	call	2770 <__udivsi3>
    111c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1120:	e0bffe17 	ldw	r2,-8(fp)
    1124:	10002a26 	beq	r2,zero,11d0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    1128:	e03ffc15 	stw	zero,-16(fp)
    112c:	00001706 	br	118c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1130:	00a00034 	movhi	r2,32768
    1134:	10bfffc4 	addi	r2,r2,-1
    1138:	10bfffc4 	addi	r2,r2,-1
    113c:	103ffe1e 	bne	r2,zero,1138 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    1140:	e0fffd17 	ldw	r3,-12(fp)
    1144:	008003f4 	movhi	r2,15
    1148:	10909004 	addi	r2,r2,16960
    114c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1150:	100b883a 	mov	r5,r2
    1154:	0100bef4 	movhi	r4,763
    1158:	213c2004 	addi	r4,r4,-3968
    115c:	00027700 	call	2770 <__udivsi3>
    1160:	100b883a 	mov	r5,r2
    1164:	01200034 	movhi	r4,32768
    1168:	213fffc4 	addi	r4,r4,-1
    116c:	00027700 	call	2770 <__udivsi3>
    1170:	1007883a 	mov	r3,r2
    1174:	e0bfff17 	ldw	r2,-4(fp)
    1178:	10c5c83a 	sub	r2,r2,r3
    117c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1180:	e0bffc17 	ldw	r2,-16(fp)
    1184:	10800044 	addi	r2,r2,1
    1188:	e0bffc15 	stw	r2,-16(fp)
    118c:	e0fffc17 	ldw	r3,-16(fp)
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	18bfe616 	blt	r3,r2,1130 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1198:	e0fffd17 	ldw	r3,-12(fp)
    119c:	008003f4 	movhi	r2,15
    11a0:	10909004 	addi	r2,r2,16960
    11a4:	1885383a 	mul	r2,r3,r2
    11a8:	100b883a 	mov	r5,r2
    11ac:	0100bef4 	movhi	r4,763
    11b0:	213c2004 	addi	r4,r4,-3968
    11b4:	00027700 	call	2770 <__udivsi3>
    11b8:	1007883a 	mov	r3,r2
    11bc:	e0bfff17 	ldw	r2,-4(fp)
    11c0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    11c4:	10bfffc4 	addi	r2,r2,-1
    11c8:	103ffe1e 	bne	r2,zero,11c4 <alt_busy_sleep+0x100>
    11cc:	00000d06 	br	1204 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    11d0:	e0fffd17 	ldw	r3,-12(fp)
    11d4:	008003f4 	movhi	r2,15
    11d8:	10909004 	addi	r2,r2,16960
    11dc:	1885383a 	mul	r2,r3,r2
    11e0:	100b883a 	mov	r5,r2
    11e4:	0100bef4 	movhi	r4,763
    11e8:	213c2004 	addi	r4,r4,-3968
    11ec:	00027700 	call	2770 <__udivsi3>
    11f0:	1007883a 	mov	r3,r2
    11f4:	e0bfff17 	ldw	r2,-4(fp)
    11f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    11fc:	10bfffc4 	addi	r2,r2,-1
    1200:	00bffe16 	blt	zero,r2,11fc <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1204:	0005883a 	mov	r2,zero
}
    1208:	e037883a 	mov	sp,fp
    120c:	dfc00117 	ldw	ra,4(sp)
    1210:	df000017 	ldw	fp,0(sp)
    1214:	dec00204 	addi	sp,sp,8
    1218:	f800283a 	ret

0000121c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    121c:	defffe04 	addi	sp,sp,-8
    1220:	dfc00115 	stw	ra,4(sp)
    1224:	df000015 	stw	fp,0(sp)
    1228:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    122c:	d0a00517 	ldw	r2,-32748(gp)
    1230:	10000326 	beq	r2,zero,1240 <alt_get_errno+0x24>
    1234:	d0a00517 	ldw	r2,-32748(gp)
    1238:	103ee83a 	callr	r2
    123c:	00000106 	br	1244 <alt_get_errno+0x28>
    1240:	d0a01204 	addi	r2,gp,-32696
}
    1244:	e037883a 	mov	sp,fp
    1248:	dfc00117 	ldw	ra,4(sp)
    124c:	df000017 	ldw	fp,0(sp)
    1250:	dec00204 	addi	sp,sp,8
    1254:	f800283a 	ret

00001258 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1258:	defffb04 	addi	sp,sp,-20
    125c:	dfc00415 	stw	ra,16(sp)
    1260:	df000315 	stw	fp,12(sp)
    1264:	df000304 	addi	fp,sp,12
    1268:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    126c:	e0bfff17 	ldw	r2,-4(fp)
    1270:	10000616 	blt	r2,zero,128c <close+0x34>
    1274:	e0bfff17 	ldw	r2,-4(fp)
    1278:	10c00324 	muli	r3,r2,12
    127c:	008000b4 	movhi	r2,2
    1280:	10843004 	addi	r2,r2,4288
    1284:	1885883a 	add	r2,r3,r2
    1288:	00000106 	br	1290 <close+0x38>
    128c:	0005883a 	mov	r2,zero
    1290:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1294:	e0bffd17 	ldw	r2,-12(fp)
    1298:	10001926 	beq	r2,zero,1300 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    129c:	e0bffd17 	ldw	r2,-12(fp)
    12a0:	10800017 	ldw	r2,0(r2)
    12a4:	10800417 	ldw	r2,16(r2)
    12a8:	10000626 	beq	r2,zero,12c4 <close+0x6c>
    12ac:	e0bffd17 	ldw	r2,-12(fp)
    12b0:	10800017 	ldw	r2,0(r2)
    12b4:	10800417 	ldw	r2,16(r2)
    12b8:	e13ffd17 	ldw	r4,-12(fp)
    12bc:	103ee83a 	callr	r2
    12c0:	00000106 	br	12c8 <close+0x70>
    12c4:	0005883a 	mov	r2,zero
    12c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    12cc:	e13fff17 	ldw	r4,-4(fp)
    12d0:	0001ba40 	call	1ba4 <alt_release_fd>
    if (rval < 0)
    12d4:	e0bffe17 	ldw	r2,-8(fp)
    12d8:	1000070e 	bge	r2,zero,12f8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    12dc:	000121c0 	call	121c <alt_get_errno>
    12e0:	1007883a 	mov	r3,r2
    12e4:	e0bffe17 	ldw	r2,-8(fp)
    12e8:	0085c83a 	sub	r2,zero,r2
    12ec:	18800015 	stw	r2,0(r3)
      return -1;
    12f0:	00bfffc4 	movi	r2,-1
    12f4:	00000706 	br	1314 <close+0xbc>
    }
    return 0;
    12f8:	0005883a 	mov	r2,zero
    12fc:	00000506 	br	1314 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1300:	000121c0 	call	121c <alt_get_errno>
    1304:	1007883a 	mov	r3,r2
    1308:	00801444 	movi	r2,81
    130c:	18800015 	stw	r2,0(r3)
    return -1;
    1310:	00bfffc4 	movi	r2,-1
  }
}
    1314:	e037883a 	mov	sp,fp
    1318:	dfc00117 	ldw	ra,4(sp)
    131c:	df000017 	ldw	fp,0(sp)
    1320:	dec00204 	addi	sp,sp,8
    1324:	f800283a 	ret

00001328 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1328:	defffe04 	addi	sp,sp,-8
    132c:	df000115 	stw	fp,4(sp)
    1330:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    1334:	e03fff15 	stw	zero,-4(fp)
    1338:	00000506 	br	1350 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    133c:	e0bfff17 	ldw	r2,-4(fp)
    1340:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    1344:	e0bfff17 	ldw	r2,-4(fp)
    1348:	10800804 	addi	r2,r2,32
    134c:	e0bfff15 	stw	r2,-4(fp)
    1350:	e0bfff17 	ldw	r2,-4(fp)
    1354:	10820030 	cmpltui	r2,r2,2048
    1358:	103ff81e 	bne	r2,zero,133c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    135c:	0001883a 	nop
    1360:	e037883a 	mov	sp,fp
    1364:	df000017 	ldw	fp,0(sp)
    1368:	dec00104 	addi	sp,sp,4
    136c:	f800283a 	ret

00001370 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1370:	defffc04 	addi	sp,sp,-16
    1374:	df000315 	stw	fp,12(sp)
    1378:	df000304 	addi	fp,sp,12
    137c:	e13ffd15 	stw	r4,-12(fp)
    1380:	e17ffe15 	stw	r5,-8(fp)
    1384:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1388:	e0bfff17 	ldw	r2,-4(fp)
}
    138c:	e037883a 	mov	sp,fp
    1390:	df000017 	ldw	fp,0(sp)
    1394:	dec00104 	addi	sp,sp,4
    1398:	f800283a 	ret

0000139c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    139c:	defffe04 	addi	sp,sp,-8
    13a0:	dfc00115 	stw	ra,4(sp)
    13a4:	df000015 	stw	fp,0(sp)
    13a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    13ac:	d0a00517 	ldw	r2,-32748(gp)
    13b0:	10000326 	beq	r2,zero,13c0 <alt_get_errno+0x24>
    13b4:	d0a00517 	ldw	r2,-32748(gp)
    13b8:	103ee83a 	callr	r2
    13bc:	00000106 	br	13c4 <alt_get_errno+0x28>
    13c0:	d0a01204 	addi	r2,gp,-32696
}
    13c4:	e037883a 	mov	sp,fp
    13c8:	dfc00117 	ldw	ra,4(sp)
    13cc:	df000017 	ldw	fp,0(sp)
    13d0:	dec00204 	addi	sp,sp,8
    13d4:	f800283a 	ret

000013d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    13d8:	defffa04 	addi	sp,sp,-24
    13dc:	dfc00515 	stw	ra,20(sp)
    13e0:	df000415 	stw	fp,16(sp)
    13e4:	df000404 	addi	fp,sp,16
    13e8:	e13ffe15 	stw	r4,-8(fp)
    13ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    13f0:	e0bffe17 	ldw	r2,-8(fp)
    13f4:	10000326 	beq	r2,zero,1404 <alt_dev_llist_insert+0x2c>
    13f8:	e0bffe17 	ldw	r2,-8(fp)
    13fc:	10800217 	ldw	r2,8(r2)
    1400:	1000061e 	bne	r2,zero,141c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    1404:	000139c0 	call	139c <alt_get_errno>
    1408:	1007883a 	mov	r3,r2
    140c:	00800584 	movi	r2,22
    1410:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1414:	00bffa84 	movi	r2,-22
    1418:	00001306 	br	1468 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    141c:	e0bffe17 	ldw	r2,-8(fp)
    1420:	e0ffff17 	ldw	r3,-4(fp)
    1424:	e0fffc15 	stw	r3,-16(fp)
    1428:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    142c:	e0bffd17 	ldw	r2,-12(fp)
    1430:	e0fffc17 	ldw	r3,-16(fp)
    1434:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1438:	e0bffc17 	ldw	r2,-16(fp)
    143c:	10c00017 	ldw	r3,0(r2)
    1440:	e0bffd17 	ldw	r2,-12(fp)
    1444:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1448:	e0bffc17 	ldw	r2,-16(fp)
    144c:	10800017 	ldw	r2,0(r2)
    1450:	e0fffd17 	ldw	r3,-12(fp)
    1454:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1458:	e0bffc17 	ldw	r2,-16(fp)
    145c:	e0fffd17 	ldw	r3,-12(fp)
    1460:	10c00015 	stw	r3,0(r2)

  return 0;  
    1464:	0005883a 	mov	r2,zero
}
    1468:	e037883a 	mov	sp,fp
    146c:	dfc00117 	ldw	ra,4(sp)
    1470:	df000017 	ldw	fp,0(sp)
    1474:	dec00204 	addi	sp,sp,8
    1478:	f800283a 	ret

0000147c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    147c:	defffd04 	addi	sp,sp,-12
    1480:	dfc00215 	stw	ra,8(sp)
    1484:	df000115 	stw	fp,4(sp)
    1488:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    148c:	00800034 	movhi	r2,0
    1490:	108a1704 	addi	r2,r2,10332
    1494:	e0bfff15 	stw	r2,-4(fp)
    1498:	00000606 	br	14b4 <_do_ctors+0x38>
        (*ctor) (); 
    149c:	e0bfff17 	ldw	r2,-4(fp)
    14a0:	10800017 	ldw	r2,0(r2)
    14a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    14a8:	e0bfff17 	ldw	r2,-4(fp)
    14ac:	10bfff04 	addi	r2,r2,-4
    14b0:	e0bfff15 	stw	r2,-4(fp)
    14b4:	e0ffff17 	ldw	r3,-4(fp)
    14b8:	00800034 	movhi	r2,0
    14bc:	108a1804 	addi	r2,r2,10336
    14c0:	18bff62e 	bgeu	r3,r2,149c <_do_ctors+0x20>
        (*ctor) (); 
}
    14c4:	0001883a 	nop
    14c8:	e037883a 	mov	sp,fp
    14cc:	dfc00117 	ldw	ra,4(sp)
    14d0:	df000017 	ldw	fp,0(sp)
    14d4:	dec00204 	addi	sp,sp,8
    14d8:	f800283a 	ret

000014dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    14dc:	defffd04 	addi	sp,sp,-12
    14e0:	dfc00215 	stw	ra,8(sp)
    14e4:	df000115 	stw	fp,4(sp)
    14e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    14ec:	00800034 	movhi	r2,0
    14f0:	108a1704 	addi	r2,r2,10332
    14f4:	e0bfff15 	stw	r2,-4(fp)
    14f8:	00000606 	br	1514 <_do_dtors+0x38>
        (*dtor) (); 
    14fc:	e0bfff17 	ldw	r2,-4(fp)
    1500:	10800017 	ldw	r2,0(r2)
    1504:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1508:	e0bfff17 	ldw	r2,-4(fp)
    150c:	10bfff04 	addi	r2,r2,-4
    1510:	e0bfff15 	stw	r2,-4(fp)
    1514:	e0ffff17 	ldw	r3,-4(fp)
    1518:	00800034 	movhi	r2,0
    151c:	108a1804 	addi	r2,r2,10336
    1520:	18bff62e 	bgeu	r3,r2,14fc <_do_dtors+0x20>
        (*dtor) (); 
}
    1524:	0001883a 	nop
    1528:	e037883a 	mov	sp,fp
    152c:	dfc00117 	ldw	ra,4(sp)
    1530:	df000017 	ldw	fp,0(sp)
    1534:	dec00204 	addi	sp,sp,8
    1538:	f800283a 	ret

0000153c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    153c:	defffe04 	addi	sp,sp,-8
    1540:	dfc00115 	stw	ra,4(sp)
    1544:	df000015 	stw	fp,0(sp)
    1548:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    154c:	01440004 	movi	r5,4096
    1550:	0009883a 	mov	r4,zero
    1554:	000200c0 	call	200c <alt_icache_flush>
#endif
}
    1558:	0001883a 	nop
    155c:	e037883a 	mov	sp,fp
    1560:	dfc00117 	ldw	ra,4(sp)
    1564:	df000017 	ldw	fp,0(sp)
    1568:	dec00204 	addi	sp,sp,8
    156c:	f800283a 	ret

00001570 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1570:	defff904 	addi	sp,sp,-28
    1574:	dfc00615 	stw	ra,24(sp)
    1578:	df000515 	stw	fp,20(sp)
    157c:	df000504 	addi	fp,sp,20
    1580:	e13ffc15 	stw	r4,-16(fp)
    1584:	e17ffd15 	stw	r5,-12(fp)
    1588:	e1bffe15 	stw	r6,-8(fp)
    158c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1590:	e0800217 	ldw	r2,8(fp)
    1594:	d8800015 	stw	r2,0(sp)
    1598:	e1ffff17 	ldw	r7,-4(fp)
    159c:	e1bffe17 	ldw	r6,-8(fp)
    15a0:	e17ffd17 	ldw	r5,-12(fp)
    15a4:	e13ffc17 	ldw	r4,-16(fp)
    15a8:	00017200 	call	1720 <alt_iic_isr_register>
}  
    15ac:	e037883a 	mov	sp,fp
    15b0:	dfc00117 	ldw	ra,4(sp)
    15b4:	df000017 	ldw	fp,0(sp)
    15b8:	dec00204 	addi	sp,sp,8
    15bc:	f800283a 	ret

000015c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    15c0:	defff904 	addi	sp,sp,-28
    15c4:	df000615 	stw	fp,24(sp)
    15c8:	df000604 	addi	fp,sp,24
    15cc:	e13ffe15 	stw	r4,-8(fp)
    15d0:	e17fff15 	stw	r5,-4(fp)
    15d4:	e0bfff17 	ldw	r2,-4(fp)
    15d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15dc:	0005303a 	rdctl	r2,status
    15e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15e4:	e0fffb17 	ldw	r3,-20(fp)
    15e8:	00bfff84 	movi	r2,-2
    15ec:	1884703a 	and	r2,r3,r2
    15f0:	1001703a 	wrctl	status,r2
  
  return context;
    15f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    15f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    15fc:	00c00044 	movi	r3,1
    1600:	e0bffa17 	ldw	r2,-24(fp)
    1604:	1884983a 	sll	r2,r3,r2
    1608:	1007883a 	mov	r3,r2
    160c:	d0a00e17 	ldw	r2,-32712(gp)
    1610:	1884b03a 	or	r2,r3,r2
    1614:	d0a00e15 	stw	r2,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1618:	d0a00e17 	ldw	r2,-32712(gp)
    161c:	100170fa 	wrctl	ienable,r2
    1620:	e0bffc17 	ldw	r2,-16(fp)
    1624:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1628:	e0bffd17 	ldw	r2,-12(fp)
    162c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1630:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    1634:	0001883a 	nop
}
    1638:	e037883a 	mov	sp,fp
    163c:	df000017 	ldw	fp,0(sp)
    1640:	dec00104 	addi	sp,sp,4
    1644:	f800283a 	ret

00001648 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    1648:	defff904 	addi	sp,sp,-28
    164c:	df000615 	stw	fp,24(sp)
    1650:	df000604 	addi	fp,sp,24
    1654:	e13ffe15 	stw	r4,-8(fp)
    1658:	e17fff15 	stw	r5,-4(fp)
    165c:	e0bfff17 	ldw	r2,-4(fp)
    1660:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1664:	0005303a 	rdctl	r2,status
    1668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    166c:	e0fffb17 	ldw	r3,-20(fp)
    1670:	00bfff84 	movi	r2,-2
    1674:	1884703a 	and	r2,r3,r2
    1678:	1001703a 	wrctl	status,r2
  
  return context;
    167c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1680:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    1684:	00c00044 	movi	r3,1
    1688:	e0bffa17 	ldw	r2,-24(fp)
    168c:	1884983a 	sll	r2,r3,r2
    1690:	0084303a 	nor	r2,zero,r2
    1694:	1007883a 	mov	r3,r2
    1698:	d0a00e17 	ldw	r2,-32712(gp)
    169c:	1884703a 	and	r2,r3,r2
    16a0:	d0a00e15 	stw	r2,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    16a4:	d0a00e17 	ldw	r2,-32712(gp)
    16a8:	100170fa 	wrctl	ienable,r2
    16ac:	e0bffc17 	ldw	r2,-16(fp)
    16b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    16b4:	e0bffd17 	ldw	r2,-12(fp)
    16b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    16bc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    16c0:	0001883a 	nop
}
    16c4:	e037883a 	mov	sp,fp
    16c8:	df000017 	ldw	fp,0(sp)
    16cc:	dec00104 	addi	sp,sp,4
    16d0:	f800283a 	ret

000016d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    16d4:	defffc04 	addi	sp,sp,-16
    16d8:	df000315 	stw	fp,12(sp)
    16dc:	df000304 	addi	fp,sp,12
    16e0:	e13ffe15 	stw	r4,-8(fp)
    16e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    16e8:	000530fa 	rdctl	r2,ienable
    16ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    16f0:	00c00044 	movi	r3,1
    16f4:	e0bfff17 	ldw	r2,-4(fp)
    16f8:	1884983a 	sll	r2,r3,r2
    16fc:	1007883a 	mov	r3,r2
    1700:	e0bffd17 	ldw	r2,-12(fp)
    1704:	1884703a 	and	r2,r3,r2
    1708:	1004c03a 	cmpne	r2,r2,zero
    170c:	10803fcc 	andi	r2,r2,255
}
    1710:	e037883a 	mov	sp,fp
    1714:	df000017 	ldw	fp,0(sp)
    1718:	dec00104 	addi	sp,sp,4
    171c:	f800283a 	ret

00001720 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1720:	defff504 	addi	sp,sp,-44
    1724:	dfc00a15 	stw	ra,40(sp)
    1728:	df000915 	stw	fp,36(sp)
    172c:	df000904 	addi	fp,sp,36
    1730:	e13ffc15 	stw	r4,-16(fp)
    1734:	e17ffd15 	stw	r5,-12(fp)
    1738:	e1bffe15 	stw	r6,-8(fp)
    173c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    1740:	00bffa84 	movi	r2,-22
    1744:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1748:	e0bffd17 	ldw	r2,-12(fp)
    174c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1750:	e0bff817 	ldw	r2,-32(fp)
    1754:	10800808 	cmpgei	r2,r2,32
    1758:	1000271e 	bne	r2,zero,17f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    175c:	0005303a 	rdctl	r2,status
    1760:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1764:	e0fffb17 	ldw	r3,-20(fp)
    1768:	00bfff84 	movi	r2,-2
    176c:	1884703a 	and	r2,r3,r2
    1770:	1001703a 	wrctl	status,r2
  
  return context;
    1774:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1778:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    177c:	008000b4 	movhi	r2,2
    1780:	1085ac04 	addi	r2,r2,5808
    1784:	e0fff817 	ldw	r3,-32(fp)
    1788:	180690fa 	slli	r3,r3,3
    178c:	10c5883a 	add	r2,r2,r3
    1790:	e0fffe17 	ldw	r3,-8(fp)
    1794:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    1798:	008000b4 	movhi	r2,2
    179c:	1085ac04 	addi	r2,r2,5808
    17a0:	e0fff817 	ldw	r3,-32(fp)
    17a4:	180690fa 	slli	r3,r3,3
    17a8:	10c5883a 	add	r2,r2,r3
    17ac:	10800104 	addi	r2,r2,4
    17b0:	e0ffff17 	ldw	r3,-4(fp)
    17b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    17b8:	e0bffe17 	ldw	r2,-8(fp)
    17bc:	10000526 	beq	r2,zero,17d4 <alt_iic_isr_register+0xb4>
    17c0:	e0bff817 	ldw	r2,-32(fp)
    17c4:	100b883a 	mov	r5,r2
    17c8:	e13ffc17 	ldw	r4,-16(fp)
    17cc:	00015c00 	call	15c0 <alt_ic_irq_enable>
    17d0:	00000406 	br	17e4 <alt_iic_isr_register+0xc4>
    17d4:	e0bff817 	ldw	r2,-32(fp)
    17d8:	100b883a 	mov	r5,r2
    17dc:	e13ffc17 	ldw	r4,-16(fp)
    17e0:	00016480 	call	1648 <alt_ic_irq_disable>
    17e4:	e0bff715 	stw	r2,-36(fp)
    17e8:	e0bffa17 	ldw	r2,-24(fp)
    17ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17f0:	e0bff917 	ldw	r2,-28(fp)
    17f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    17f8:	e0bff717 	ldw	r2,-36(fp)
}
    17fc:	e037883a 	mov	sp,fp
    1800:	dfc00117 	ldw	ra,4(sp)
    1804:	df000017 	ldw	fp,0(sp)
    1808:	dec00204 	addi	sp,sp,8
    180c:	f800283a 	ret

00001810 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1810:	defff904 	addi	sp,sp,-28
    1814:	dfc00615 	stw	ra,24(sp)
    1818:	df000515 	stw	fp,20(sp)
    181c:	df000504 	addi	fp,sp,20
    1820:	e13ffc15 	stw	r4,-16(fp)
    1824:	e17ffd15 	stw	r5,-12(fp)
    1828:	e1bffe15 	stw	r6,-8(fp)
    182c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    1830:	e1bfff17 	ldw	r6,-4(fp)
    1834:	e17ffe17 	ldw	r5,-8(fp)
    1838:	e13ffd17 	ldw	r4,-12(fp)
    183c:	0001a500 	call	1a50 <open>
    1840:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    1844:	e0bffb17 	ldw	r2,-20(fp)
    1848:	10001c16 	blt	r2,zero,18bc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    184c:	008000b4 	movhi	r2,2
    1850:	10843004 	addi	r2,r2,4288
    1854:	e0fffb17 	ldw	r3,-20(fp)
    1858:	18c00324 	muli	r3,r3,12
    185c:	10c5883a 	add	r2,r2,r3
    1860:	10c00017 	ldw	r3,0(r2)
    1864:	e0bffc17 	ldw	r2,-16(fp)
    1868:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    186c:	008000b4 	movhi	r2,2
    1870:	10843004 	addi	r2,r2,4288
    1874:	e0fffb17 	ldw	r3,-20(fp)
    1878:	18c00324 	muli	r3,r3,12
    187c:	10c5883a 	add	r2,r2,r3
    1880:	10800104 	addi	r2,r2,4
    1884:	10c00017 	ldw	r3,0(r2)
    1888:	e0bffc17 	ldw	r2,-16(fp)
    188c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1890:	008000b4 	movhi	r2,2
    1894:	10843004 	addi	r2,r2,4288
    1898:	e0fffb17 	ldw	r3,-20(fp)
    189c:	18c00324 	muli	r3,r3,12
    18a0:	10c5883a 	add	r2,r2,r3
    18a4:	10800204 	addi	r2,r2,8
    18a8:	10c00017 	ldw	r3,0(r2)
    18ac:	e0bffc17 	ldw	r2,-16(fp)
    18b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    18b4:	e13ffb17 	ldw	r4,-20(fp)
    18b8:	0001ba40 	call	1ba4 <alt_release_fd>
  }
} 
    18bc:	0001883a 	nop
    18c0:	e037883a 	mov	sp,fp
    18c4:	dfc00117 	ldw	ra,4(sp)
    18c8:	df000017 	ldw	fp,0(sp)
    18cc:	dec00204 	addi	sp,sp,8
    18d0:	f800283a 	ret

000018d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    18d4:	defffb04 	addi	sp,sp,-20
    18d8:	dfc00415 	stw	ra,16(sp)
    18dc:	df000315 	stw	fp,12(sp)
    18e0:	df000304 	addi	fp,sp,12
    18e4:	e13ffd15 	stw	r4,-12(fp)
    18e8:	e17ffe15 	stw	r5,-8(fp)
    18ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    18f0:	01c07fc4 	movi	r7,511
    18f4:	01800044 	movi	r6,1
    18f8:	e17ffd17 	ldw	r5,-12(fp)
    18fc:	010000b4 	movhi	r4,2
    1900:	21043304 	addi	r4,r4,4300
    1904:	00018100 	call	1810 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1908:	01c07fc4 	movi	r7,511
    190c:	000d883a 	mov	r6,zero
    1910:	e17ffe17 	ldw	r5,-8(fp)
    1914:	010000b4 	movhi	r4,2
    1918:	21043004 	addi	r4,r4,4288
    191c:	00018100 	call	1810 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1920:	01c07fc4 	movi	r7,511
    1924:	01800044 	movi	r6,1
    1928:	e17fff17 	ldw	r5,-4(fp)
    192c:	010000b4 	movhi	r4,2
    1930:	21043604 	addi	r4,r4,4312
    1934:	00018100 	call	1810 <alt_open_fd>
}  
    1938:	0001883a 	nop
    193c:	e037883a 	mov	sp,fp
    1940:	dfc00117 	ldw	ra,4(sp)
    1944:	df000017 	ldw	fp,0(sp)
    1948:	dec00204 	addi	sp,sp,8
    194c:	f800283a 	ret

00001950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1950:	defffe04 	addi	sp,sp,-8
    1954:	dfc00115 	stw	ra,4(sp)
    1958:	df000015 	stw	fp,0(sp)
    195c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1960:	d0a00517 	ldw	r2,-32748(gp)
    1964:	10000326 	beq	r2,zero,1974 <alt_get_errno+0x24>
    1968:	d0a00517 	ldw	r2,-32748(gp)
    196c:	103ee83a 	callr	r2
    1970:	00000106 	br	1978 <alt_get_errno+0x28>
    1974:	d0a01204 	addi	r2,gp,-32696
}
    1978:	e037883a 	mov	sp,fp
    197c:	dfc00117 	ldw	ra,4(sp)
    1980:	df000017 	ldw	fp,0(sp)
    1984:	dec00204 	addi	sp,sp,8
    1988:	f800283a 	ret

0000198c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    198c:	defffd04 	addi	sp,sp,-12
    1990:	df000215 	stw	fp,8(sp)
    1994:	df000204 	addi	fp,sp,8
    1998:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    199c:	e0bfff17 	ldw	r2,-4(fp)
    19a0:	10800217 	ldw	r2,8(r2)
    19a4:	10d00034 	orhi	r3,r2,16384
    19a8:	e0bfff17 	ldw	r2,-4(fp)
    19ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    19b0:	e03ffe15 	stw	zero,-8(fp)
    19b4:	00001d06 	br	1a2c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    19b8:	008000b4 	movhi	r2,2
    19bc:	10843004 	addi	r2,r2,4288
    19c0:	e0fffe17 	ldw	r3,-8(fp)
    19c4:	18c00324 	muli	r3,r3,12
    19c8:	10c5883a 	add	r2,r2,r3
    19cc:	10c00017 	ldw	r3,0(r2)
    19d0:	e0bfff17 	ldw	r2,-4(fp)
    19d4:	10800017 	ldw	r2,0(r2)
    19d8:	1880111e 	bne	r3,r2,1a20 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    19dc:	008000b4 	movhi	r2,2
    19e0:	10843004 	addi	r2,r2,4288
    19e4:	e0fffe17 	ldw	r3,-8(fp)
    19e8:	18c00324 	muli	r3,r3,12
    19ec:	10c5883a 	add	r2,r2,r3
    19f0:	10800204 	addi	r2,r2,8
    19f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    19f8:	1000090e 	bge	r2,zero,1a20 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    19fc:	e0bffe17 	ldw	r2,-8(fp)
    1a00:	10c00324 	muli	r3,r2,12
    1a04:	008000b4 	movhi	r2,2
    1a08:	10843004 	addi	r2,r2,4288
    1a0c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1a10:	e0bfff17 	ldw	r2,-4(fp)
    1a14:	18800226 	beq	r3,r2,1a20 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1a18:	00bffcc4 	movi	r2,-13
    1a1c:	00000806 	br	1a40 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1a20:	e0bffe17 	ldw	r2,-8(fp)
    1a24:	10800044 	addi	r2,r2,1
    1a28:	e0bffe15 	stw	r2,-8(fp)
    1a2c:	d0a00417 	ldw	r2,-32752(gp)
    1a30:	1007883a 	mov	r3,r2
    1a34:	e0bffe17 	ldw	r2,-8(fp)
    1a38:	18bfdf2e 	bgeu	r3,r2,19b8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1a3c:	0005883a 	mov	r2,zero
}
    1a40:	e037883a 	mov	sp,fp
    1a44:	df000017 	ldw	fp,0(sp)
    1a48:	dec00104 	addi	sp,sp,4
    1a4c:	f800283a 	ret

00001a50 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1a50:	defff604 	addi	sp,sp,-40
    1a54:	dfc00915 	stw	ra,36(sp)
    1a58:	df000815 	stw	fp,32(sp)
    1a5c:	df000804 	addi	fp,sp,32
    1a60:	e13ffd15 	stw	r4,-12(fp)
    1a64:	e17ffe15 	stw	r5,-8(fp)
    1a68:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1a6c:	00bfffc4 	movi	r2,-1
    1a70:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    1a74:	00bffb44 	movi	r2,-19
    1a78:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    1a7c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1a80:	d1600204 	addi	r5,gp,-32760
    1a84:	e13ffd17 	ldw	r4,-12(fp)
    1a88:	0001dd00 	call	1dd0 <alt_find_dev>
    1a8c:	e0bff815 	stw	r2,-32(fp)
    1a90:	e0bff817 	ldw	r2,-32(fp)
    1a94:	1000051e 	bne	r2,zero,1aac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1a98:	e13ffd17 	ldw	r4,-12(fp)
    1a9c:	0001e600 	call	1e60 <alt_find_file>
    1aa0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    1aa4:	00800044 	movi	r2,1
    1aa8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1aac:	e0bff817 	ldw	r2,-32(fp)
    1ab0:	10002926 	beq	r2,zero,1b58 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1ab4:	e13ff817 	ldw	r4,-32(fp)
    1ab8:	0001f680 	call	1f68 <alt_get_fd>
    1abc:	e0bff915 	stw	r2,-28(fp)
    1ac0:	e0bff917 	ldw	r2,-28(fp)
    1ac4:	1000030e 	bge	r2,zero,1ad4 <open+0x84>
    {
      status = index;
    1ac8:	e0bff917 	ldw	r2,-28(fp)
    1acc:	e0bffa15 	stw	r2,-24(fp)
    1ad0:	00002306 	br	1b60 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    1ad4:	e0bff917 	ldw	r2,-28(fp)
    1ad8:	10c00324 	muli	r3,r2,12
    1adc:	008000b4 	movhi	r2,2
    1ae0:	10843004 	addi	r2,r2,4288
    1ae4:	1885883a 	add	r2,r3,r2
    1ae8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1aec:	e0fffe17 	ldw	r3,-8(fp)
    1af0:	00900034 	movhi	r2,16384
    1af4:	10bfffc4 	addi	r2,r2,-1
    1af8:	1886703a 	and	r3,r3,r2
    1afc:	e0bffc17 	ldw	r2,-16(fp)
    1b00:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1b04:	e0bffb17 	ldw	r2,-20(fp)
    1b08:	1000051e 	bne	r2,zero,1b20 <open+0xd0>
    1b0c:	e13ffc17 	ldw	r4,-16(fp)
    1b10:	000198c0 	call	198c <alt_file_locked>
    1b14:	e0bffa15 	stw	r2,-24(fp)
    1b18:	e0bffa17 	ldw	r2,-24(fp)
    1b1c:	10001016 	blt	r2,zero,1b60 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1b20:	e0bff817 	ldw	r2,-32(fp)
    1b24:	10800317 	ldw	r2,12(r2)
    1b28:	10000826 	beq	r2,zero,1b4c <open+0xfc>
    1b2c:	e0bff817 	ldw	r2,-32(fp)
    1b30:	10800317 	ldw	r2,12(r2)
    1b34:	e1ffff17 	ldw	r7,-4(fp)
    1b38:	e1bffe17 	ldw	r6,-8(fp)
    1b3c:	e17ffd17 	ldw	r5,-12(fp)
    1b40:	e13ffc17 	ldw	r4,-16(fp)
    1b44:	103ee83a 	callr	r2
    1b48:	00000106 	br	1b50 <open+0x100>
    1b4c:	0005883a 	mov	r2,zero
    1b50:	e0bffa15 	stw	r2,-24(fp)
    1b54:	00000206 	br	1b60 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1b58:	00bffb44 	movi	r2,-19
    1b5c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1b60:	e0bffa17 	ldw	r2,-24(fp)
    1b64:	1000090e 	bge	r2,zero,1b8c <open+0x13c>
  {
    alt_release_fd (index);  
    1b68:	e13ff917 	ldw	r4,-28(fp)
    1b6c:	0001ba40 	call	1ba4 <alt_release_fd>
    ALT_ERRNO = -status;
    1b70:	00019500 	call	1950 <alt_get_errno>
    1b74:	1007883a 	mov	r3,r2
    1b78:	e0bffa17 	ldw	r2,-24(fp)
    1b7c:	0085c83a 	sub	r2,zero,r2
    1b80:	18800015 	stw	r2,0(r3)
    return -1;
    1b84:	00bfffc4 	movi	r2,-1
    1b88:	00000106 	br	1b90 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    1b8c:	e0bff917 	ldw	r2,-28(fp)
}
    1b90:	e037883a 	mov	sp,fp
    1b94:	dfc00117 	ldw	ra,4(sp)
    1b98:	df000017 	ldw	fp,0(sp)
    1b9c:	dec00204 	addi	sp,sp,8
    1ba0:	f800283a 	ret

00001ba4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1ba4:	defffe04 	addi	sp,sp,-8
    1ba8:	df000115 	stw	fp,4(sp)
    1bac:	df000104 	addi	fp,sp,4
    1bb0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    1bb4:	e0bfff17 	ldw	r2,-4(fp)
    1bb8:	108000d0 	cmplti	r2,r2,3
    1bbc:	10000d1e 	bne	r2,zero,1bf4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    1bc0:	008000b4 	movhi	r2,2
    1bc4:	10843004 	addi	r2,r2,4288
    1bc8:	e0ffff17 	ldw	r3,-4(fp)
    1bcc:	18c00324 	muli	r3,r3,12
    1bd0:	10c5883a 	add	r2,r2,r3
    1bd4:	10800204 	addi	r2,r2,8
    1bd8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    1bdc:	008000b4 	movhi	r2,2
    1be0:	10843004 	addi	r2,r2,4288
    1be4:	e0ffff17 	ldw	r3,-4(fp)
    1be8:	18c00324 	muli	r3,r3,12
    1bec:	10c5883a 	add	r2,r2,r3
    1bf0:	10000015 	stw	zero,0(r2)
  }
}
    1bf4:	0001883a 	nop
    1bf8:	e037883a 	mov	sp,fp
    1bfc:	df000017 	ldw	fp,0(sp)
    1c00:	dec00104 	addi	sp,sp,4
    1c04:	f800283a 	ret

00001c08 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1c08:	defffa04 	addi	sp,sp,-24
    1c0c:	df000515 	stw	fp,20(sp)
    1c10:	df000504 	addi	fp,sp,20
    1c14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1c18:	0005303a 	rdctl	r2,status
    1c1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c20:	e0fffc17 	ldw	r3,-16(fp)
    1c24:	00bfff84 	movi	r2,-2
    1c28:	1884703a 	and	r2,r3,r2
    1c2c:	1001703a 	wrctl	status,r2
  
  return context;
    1c30:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1c34:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    1c38:	e0bfff17 	ldw	r2,-4(fp)
    1c3c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1c40:	e0bffd17 	ldw	r2,-12(fp)
    1c44:	10800017 	ldw	r2,0(r2)
    1c48:	e0fffd17 	ldw	r3,-12(fp)
    1c4c:	18c00117 	ldw	r3,4(r3)
    1c50:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    1c54:	e0bffd17 	ldw	r2,-12(fp)
    1c58:	10800117 	ldw	r2,4(r2)
    1c5c:	e0fffd17 	ldw	r3,-12(fp)
    1c60:	18c00017 	ldw	r3,0(r3)
    1c64:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1c68:	e0bffd17 	ldw	r2,-12(fp)
    1c6c:	e0fffd17 	ldw	r3,-12(fp)
    1c70:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    1c74:	e0bffd17 	ldw	r2,-12(fp)
    1c78:	e0fffd17 	ldw	r3,-12(fp)
    1c7c:	10c00015 	stw	r3,0(r2)
    1c80:	e0bffb17 	ldw	r2,-20(fp)
    1c84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c88:	e0bffe17 	ldw	r2,-8(fp)
    1c8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1c90:	0001883a 	nop
    1c94:	e037883a 	mov	sp,fp
    1c98:	df000017 	ldw	fp,0(sp)
    1c9c:	dec00104 	addi	sp,sp,4
    1ca0:	f800283a 	ret

00001ca4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1ca4:	defffb04 	addi	sp,sp,-20
    1ca8:	dfc00415 	stw	ra,16(sp)
    1cac:	df000315 	stw	fp,12(sp)
    1cb0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1cb4:	d0a00717 	ldw	r2,-32740(gp)
    1cb8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1cbc:	d0a01017 	ldw	r2,-32704(gp)
    1cc0:	10800044 	addi	r2,r2,1
    1cc4:	d0a01015 	stw	r2,-32704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1cc8:	00002e06 	br	1d84 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    1ccc:	e0bffd17 	ldw	r2,-12(fp)
    1cd0:	10800017 	ldw	r2,0(r2)
    1cd4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1cd8:	e0bffd17 	ldw	r2,-12(fp)
    1cdc:	10800403 	ldbu	r2,16(r2)
    1ce0:	10803fcc 	andi	r2,r2,255
    1ce4:	10000426 	beq	r2,zero,1cf8 <alt_tick+0x54>
    1ce8:	d0a01017 	ldw	r2,-32704(gp)
    1cec:	1000021e 	bne	r2,zero,1cf8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    1cf0:	e0bffd17 	ldw	r2,-12(fp)
    1cf4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1cf8:	e0bffd17 	ldw	r2,-12(fp)
    1cfc:	10800217 	ldw	r2,8(r2)
    1d00:	d0e01017 	ldw	r3,-32704(gp)
    1d04:	18801d36 	bltu	r3,r2,1d7c <alt_tick+0xd8>
    1d08:	e0bffd17 	ldw	r2,-12(fp)
    1d0c:	10800403 	ldbu	r2,16(r2)
    1d10:	10803fcc 	andi	r2,r2,255
    1d14:	1000191e 	bne	r2,zero,1d7c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    1d18:	e0bffd17 	ldw	r2,-12(fp)
    1d1c:	10800317 	ldw	r2,12(r2)
    1d20:	e0fffd17 	ldw	r3,-12(fp)
    1d24:	18c00517 	ldw	r3,20(r3)
    1d28:	1809883a 	mov	r4,r3
    1d2c:	103ee83a 	callr	r2
    1d30:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1d34:	e0bfff17 	ldw	r2,-4(fp)
    1d38:	1000031e 	bne	r2,zero,1d48 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    1d3c:	e13ffd17 	ldw	r4,-12(fp)
    1d40:	0001c080 	call	1c08 <alt_alarm_stop>
    1d44:	00000d06 	br	1d7c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    1d48:	e0bffd17 	ldw	r2,-12(fp)
    1d4c:	10c00217 	ldw	r3,8(r2)
    1d50:	e0bfff17 	ldw	r2,-4(fp)
    1d54:	1887883a 	add	r3,r3,r2
    1d58:	e0bffd17 	ldw	r2,-12(fp)
    1d5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1d60:	e0bffd17 	ldw	r2,-12(fp)
    1d64:	10c00217 	ldw	r3,8(r2)
    1d68:	d0a01017 	ldw	r2,-32704(gp)
    1d6c:	1880032e 	bgeu	r3,r2,1d7c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    1d70:	e0bffd17 	ldw	r2,-12(fp)
    1d74:	00c00044 	movi	r3,1
    1d78:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    1d7c:	e0bffe17 	ldw	r2,-8(fp)
    1d80:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1d84:	e0fffd17 	ldw	r3,-12(fp)
    1d88:	d0a00704 	addi	r2,gp,-32740
    1d8c:	18bfcf1e 	bne	r3,r2,1ccc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    1d90:	0001883a 	nop
}
    1d94:	0001883a 	nop
    1d98:	e037883a 	mov	sp,fp
    1d9c:	dfc00117 	ldw	ra,4(sp)
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00204 	addi	sp,sp,8
    1da8:	f800283a 	ret

00001dac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    1dac:	deffff04 	addi	sp,sp,-4
    1db0:	df000015 	stw	fp,0(sp)
    1db4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    1db8:	000170fa 	wrctl	ienable,zero
}
    1dbc:	0001883a 	nop
    1dc0:	e037883a 	mov	sp,fp
    1dc4:	df000017 	ldw	fp,0(sp)
    1dc8:	dec00104 	addi	sp,sp,4
    1dcc:	f800283a 	ret

00001dd0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1dd0:	defffa04 	addi	sp,sp,-24
    1dd4:	dfc00515 	stw	ra,20(sp)
    1dd8:	df000415 	stw	fp,16(sp)
    1ddc:	df000404 	addi	fp,sp,16
    1de0:	e13ffe15 	stw	r4,-8(fp)
    1de4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    1de8:	e0bfff17 	ldw	r2,-4(fp)
    1dec:	10800017 	ldw	r2,0(r2)
    1df0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1df4:	e13ffe17 	ldw	r4,-8(fp)
    1df8:	00023480 	call	2348 <strlen>
    1dfc:	10800044 	addi	r2,r2,1
    1e00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1e04:	00000d06 	br	1e3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1e08:	e0bffc17 	ldw	r2,-16(fp)
    1e0c:	10800217 	ldw	r2,8(r2)
    1e10:	e0fffd17 	ldw	r3,-12(fp)
    1e14:	180d883a 	mov	r6,r3
    1e18:	e17ffe17 	ldw	r5,-8(fp)
    1e1c:	1009883a 	mov	r4,r2
    1e20:	00021840 	call	2184 <memcmp>
    1e24:	1000021e 	bne	r2,zero,1e30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    1e28:	e0bffc17 	ldw	r2,-16(fp)
    1e2c:	00000706 	br	1e4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    1e30:	e0bffc17 	ldw	r2,-16(fp)
    1e34:	10800017 	ldw	r2,0(r2)
    1e38:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1e3c:	e0fffc17 	ldw	r3,-16(fp)
    1e40:	e0bfff17 	ldw	r2,-4(fp)
    1e44:	18bff01e 	bne	r3,r2,1e08 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    1e48:	0005883a 	mov	r2,zero
}
    1e4c:	e037883a 	mov	sp,fp
    1e50:	dfc00117 	ldw	ra,4(sp)
    1e54:	df000017 	ldw	fp,0(sp)
    1e58:	dec00204 	addi	sp,sp,8
    1e5c:	f800283a 	ret

00001e60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    1e60:	defffb04 	addi	sp,sp,-20
    1e64:	dfc00415 	stw	ra,16(sp)
    1e68:	df000315 	stw	fp,12(sp)
    1e6c:	df000304 	addi	fp,sp,12
    1e70:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1e74:	d0a00017 	ldw	r2,-32768(gp)
    1e78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1e7c:	00003106 	br	1f44 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    1e80:	e0bffd17 	ldw	r2,-12(fp)
    1e84:	10800217 	ldw	r2,8(r2)
    1e88:	1009883a 	mov	r4,r2
    1e8c:	00023480 	call	2348 <strlen>
    1e90:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    1e94:	e0bffd17 	ldw	r2,-12(fp)
    1e98:	10c00217 	ldw	r3,8(r2)
    1e9c:	e0bffe17 	ldw	r2,-8(fp)
    1ea0:	10bfffc4 	addi	r2,r2,-1
    1ea4:	1885883a 	add	r2,r3,r2
    1ea8:	10800003 	ldbu	r2,0(r2)
    1eac:	10803fcc 	andi	r2,r2,255
    1eb0:	1080201c 	xori	r2,r2,128
    1eb4:	10bfe004 	addi	r2,r2,-128
    1eb8:	10800bd8 	cmpnei	r2,r2,47
    1ebc:	1000031e 	bne	r2,zero,1ecc <alt_find_file+0x6c>
    {
      len -= 1;
    1ec0:	e0bffe17 	ldw	r2,-8(fp)
    1ec4:	10bfffc4 	addi	r2,r2,-1
    1ec8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1ecc:	e0bffe17 	ldw	r2,-8(fp)
    1ed0:	e0ffff17 	ldw	r3,-4(fp)
    1ed4:	1885883a 	add	r2,r3,r2
    1ed8:	10800003 	ldbu	r2,0(r2)
    1edc:	10803fcc 	andi	r2,r2,255
    1ee0:	1080201c 	xori	r2,r2,128
    1ee4:	10bfe004 	addi	r2,r2,-128
    1ee8:	10800be0 	cmpeqi	r2,r2,47
    1eec:	1000081e 	bne	r2,zero,1f10 <alt_find_file+0xb0>
    1ef0:	e0bffe17 	ldw	r2,-8(fp)
    1ef4:	e0ffff17 	ldw	r3,-4(fp)
    1ef8:	1885883a 	add	r2,r3,r2
    1efc:	10800003 	ldbu	r2,0(r2)
    1f00:	10803fcc 	andi	r2,r2,255
    1f04:	1080201c 	xori	r2,r2,128
    1f08:	10bfe004 	addi	r2,r2,-128
    1f0c:	10000a1e 	bne	r2,zero,1f38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    1f10:	e0bffd17 	ldw	r2,-12(fp)
    1f14:	10800217 	ldw	r2,8(r2)
    1f18:	e0fffe17 	ldw	r3,-8(fp)
    1f1c:	180d883a 	mov	r6,r3
    1f20:	e17fff17 	ldw	r5,-4(fp)
    1f24:	1009883a 	mov	r4,r2
    1f28:	00021840 	call	2184 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1f2c:	1000021e 	bne	r2,zero,1f38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    1f30:	e0bffd17 	ldw	r2,-12(fp)
    1f34:	00000706 	br	1f54 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    1f38:	e0bffd17 	ldw	r2,-12(fp)
    1f3c:	10800017 	ldw	r2,0(r2)
    1f40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1f44:	e0fffd17 	ldw	r3,-12(fp)
    1f48:	d0a00004 	addi	r2,gp,-32768
    1f4c:	18bfcc1e 	bne	r3,r2,1e80 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    1f50:	0005883a 	mov	r2,zero
}
    1f54:	e037883a 	mov	sp,fp
    1f58:	dfc00117 	ldw	ra,4(sp)
    1f5c:	df000017 	ldw	fp,0(sp)
    1f60:	dec00204 	addi	sp,sp,8
    1f64:	f800283a 	ret

00001f68 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1f68:	defffc04 	addi	sp,sp,-16
    1f6c:	df000315 	stw	fp,12(sp)
    1f70:	df000304 	addi	fp,sp,12
    1f74:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    1f78:	00bffa04 	movi	r2,-24
    1f7c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1f80:	e03ffd15 	stw	zero,-12(fp)
    1f84:	00001906 	br	1fec <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    1f88:	008000b4 	movhi	r2,2
    1f8c:	10843004 	addi	r2,r2,4288
    1f90:	e0fffd17 	ldw	r3,-12(fp)
    1f94:	18c00324 	muli	r3,r3,12
    1f98:	10c5883a 	add	r2,r2,r3
    1f9c:	10800017 	ldw	r2,0(r2)
    1fa0:	10000f1e 	bne	r2,zero,1fe0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    1fa4:	008000b4 	movhi	r2,2
    1fa8:	10843004 	addi	r2,r2,4288
    1fac:	e0fffd17 	ldw	r3,-12(fp)
    1fb0:	18c00324 	muli	r3,r3,12
    1fb4:	10c5883a 	add	r2,r2,r3
    1fb8:	e0ffff17 	ldw	r3,-4(fp)
    1fbc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    1fc0:	d0e00417 	ldw	r3,-32752(gp)
    1fc4:	e0bffd17 	ldw	r2,-12(fp)
    1fc8:	1880020e 	bge	r3,r2,1fd4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    1fcc:	e0bffd17 	ldw	r2,-12(fp)
    1fd0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
    1fd4:	e0bffd17 	ldw	r2,-12(fp)
    1fd8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    1fdc:	00000606 	br	1ff8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1fe0:	e0bffd17 	ldw	r2,-12(fp)
    1fe4:	10800044 	addi	r2,r2,1
    1fe8:	e0bffd15 	stw	r2,-12(fp)
    1fec:	e0bffd17 	ldw	r2,-12(fp)
    1ff0:	10800810 	cmplti	r2,r2,32
    1ff4:	103fe41e 	bne	r2,zero,1f88 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    1ff8:	e0bffe17 	ldw	r2,-8(fp)
}
    1ffc:	e037883a 	mov	sp,fp
    2000:	df000017 	ldw	fp,0(sp)
    2004:	dec00104 	addi	sp,sp,4
    2008:	f800283a 	ret

0000200c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    200c:	defffb04 	addi	sp,sp,-20
    2010:	df000415 	stw	fp,16(sp)
    2014:	df000404 	addi	fp,sp,16
    2018:	e13ffe15 	stw	r4,-8(fp)
    201c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    2020:	e0bfff17 	ldw	r2,-4(fp)
    2024:	10840070 	cmpltui	r2,r2,4097
    2028:	1000021e 	bne	r2,zero,2034 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    202c:	00840004 	movi	r2,4096
    2030:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    2034:	e0fffe17 	ldw	r3,-8(fp)
    2038:	e0bfff17 	ldw	r2,-4(fp)
    203c:	1885883a 	add	r2,r3,r2
    2040:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2044:	e0bffe17 	ldw	r2,-8(fp)
    2048:	e0bffc15 	stw	r2,-16(fp)
    204c:	00000506 	br	2064 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2050:	e0bffc17 	ldw	r2,-16(fp)
    2054:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2058:	e0bffc17 	ldw	r2,-16(fp)
    205c:	10800804 	addi	r2,r2,32
    2060:	e0bffc15 	stw	r2,-16(fp)
    2064:	e0fffc17 	ldw	r3,-16(fp)
    2068:	e0bffd17 	ldw	r2,-12(fp)
    206c:	18bff836 	bltu	r3,r2,2050 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2070:	e0bffe17 	ldw	r2,-8(fp)
    2074:	108007cc 	andi	r2,r2,31
    2078:	10000226 	beq	r2,zero,2084 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    207c:	e0bffc17 	ldw	r2,-16(fp)
    2080:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2084:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2088:	0001883a 	nop
    208c:	e037883a 	mov	sp,fp
    2090:	df000017 	ldw	fp,0(sp)
    2094:	dec00104 	addi	sp,sp,4
    2098:	f800283a 	ret

0000209c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    209c:	defffe04 	addi	sp,sp,-8
    20a0:	df000115 	stw	fp,4(sp)
    20a4:	df000104 	addi	fp,sp,4
    20a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    20ac:	e0bfff17 	ldw	r2,-4(fp)
    20b0:	10bffe84 	addi	r2,r2,-6
    20b4:	10c00428 	cmpgeui	r3,r2,16
    20b8:	18001a1e 	bne	r3,zero,2124 <alt_exception_cause_generated_bad_addr+0x88>
    20bc:	100690ba 	slli	r3,r2,2
    20c0:	00800034 	movhi	r2,0
    20c4:	10883504 	addi	r2,r2,8404
    20c8:	1885883a 	add	r2,r3,r2
    20cc:	10800017 	ldw	r2,0(r2)
    20d0:	1000683a 	jmp	r2
    20d4:	00002114 	movui	zero,132
    20d8:	00002114 	movui	zero,132
    20dc:	00002124 	muli	zero,zero,132
    20e0:	00002124 	muli	zero,zero,132
    20e4:	00002124 	muli	zero,zero,132
    20e8:	00002114 	movui	zero,132
    20ec:	0000211c 	xori	zero,zero,132
    20f0:	00002124 	muli	zero,zero,132
    20f4:	00002114 	movui	zero,132
    20f8:	00002114 	movui	zero,132
    20fc:	00002124 	muli	zero,zero,132
    2100:	00002114 	movui	zero,132
    2104:	0000211c 	xori	zero,zero,132
    2108:	00002124 	muli	zero,zero,132
    210c:	00002124 	muli	zero,zero,132
    2110:	00002114 	movui	zero,132
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2114:	00800044 	movi	r2,1
    2118:	00000306 	br	2128 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    211c:	0005883a 	mov	r2,zero
    2120:	00000106 	br	2128 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    2124:	0005883a 	mov	r2,zero
  }
}
    2128:	e037883a 	mov	sp,fp
    212c:	df000017 	ldw	fp,0(sp)
    2130:	dec00104 	addi	sp,sp,4
    2134:	f800283a 	ret

00002138 <atexit>:
    2138:	200b883a 	mov	r5,r4
    213c:	000f883a 	mov	r7,zero
    2140:	000d883a 	mov	r6,zero
    2144:	0009883a 	mov	r4,zero
    2148:	00023e01 	jmpi	23e0 <__register_exitproc>

0000214c <exit>:
    214c:	defffe04 	addi	sp,sp,-8
    2150:	000b883a 	mov	r5,zero
    2154:	dc000015 	stw	r16,0(sp)
    2158:	dfc00115 	stw	ra,4(sp)
    215c:	2021883a 	mov	r16,r4
    2160:	00024f80 	call	24f8 <__call_exitprocs>
    2164:	008000b4 	movhi	r2,2
    2168:	1085a204 	addi	r2,r2,5768
    216c:	11000017 	ldw	r4,0(r2)
    2170:	20800f17 	ldw	r2,60(r4)
    2174:	10000126 	beq	r2,zero,217c <exit+0x30>
    2178:	103ee83a 	callr	r2
    217c:	8009883a 	mov	r4,r16
    2180:	000282c0 	call	282c <_exit>

00002184 <memcmp>:
    2184:	01c000c4 	movi	r7,3
    2188:	3980192e 	bgeu	r7,r6,21f0 <memcmp+0x6c>
    218c:	2144b03a 	or	r2,r4,r5
    2190:	11c4703a 	and	r2,r2,r7
    2194:	10000f26 	beq	r2,zero,21d4 <memcmp+0x50>
    2198:	20800003 	ldbu	r2,0(r4)
    219c:	28c00003 	ldbu	r3,0(r5)
    21a0:	10c0151e 	bne	r2,r3,21f8 <memcmp+0x74>
    21a4:	31bfff84 	addi	r6,r6,-2
    21a8:	01ffffc4 	movi	r7,-1
    21ac:	00000406 	br	21c0 <memcmp+0x3c>
    21b0:	20800003 	ldbu	r2,0(r4)
    21b4:	28c00003 	ldbu	r3,0(r5)
    21b8:	31bfffc4 	addi	r6,r6,-1
    21bc:	10c00e1e 	bne	r2,r3,21f8 <memcmp+0x74>
    21c0:	21000044 	addi	r4,r4,1
    21c4:	29400044 	addi	r5,r5,1
    21c8:	31fff91e 	bne	r6,r7,21b0 <memcmp+0x2c>
    21cc:	0005883a 	mov	r2,zero
    21d0:	f800283a 	ret
    21d4:	20c00017 	ldw	r3,0(r4)
    21d8:	28800017 	ldw	r2,0(r5)
    21dc:	18bfee1e 	bne	r3,r2,2198 <memcmp+0x14>
    21e0:	31bfff04 	addi	r6,r6,-4
    21e4:	21000104 	addi	r4,r4,4
    21e8:	29400104 	addi	r5,r5,4
    21ec:	39bff936 	bltu	r7,r6,21d4 <memcmp+0x50>
    21f0:	303fe91e 	bne	r6,zero,2198 <memcmp+0x14>
    21f4:	003ff506 	br	21cc <memcmp+0x48>
    21f8:	10c5c83a 	sub	r2,r2,r3
    21fc:	f800283a 	ret

00002200 <memcpy>:
    2200:	defffd04 	addi	sp,sp,-12
    2204:	dfc00215 	stw	ra,8(sp)
    2208:	dc400115 	stw	r17,4(sp)
    220c:	dc000015 	stw	r16,0(sp)
    2210:	00c003c4 	movi	r3,15
    2214:	2005883a 	mov	r2,r4
    2218:	1980452e 	bgeu	r3,r6,2330 <memcpy+0x130>
    221c:	2906b03a 	or	r3,r5,r4
    2220:	18c000cc 	andi	r3,r3,3
    2224:	1800441e 	bne	r3,zero,2338 <memcpy+0x138>
    2228:	347ffc04 	addi	r17,r6,-16
    222c:	8822d13a 	srli	r17,r17,4
    2230:	28c00104 	addi	r3,r5,4
    2234:	23400104 	addi	r13,r4,4
    2238:	8820913a 	slli	r16,r17,4
    223c:	2b000204 	addi	r12,r5,8
    2240:	22c00204 	addi	r11,r4,8
    2244:	84000504 	addi	r16,r16,20
    2248:	2a800304 	addi	r10,r5,12
    224c:	22400304 	addi	r9,r4,12
    2250:	2c21883a 	add	r16,r5,r16
    2254:	2811883a 	mov	r8,r5
    2258:	200f883a 	mov	r7,r4
    225c:	41000017 	ldw	r4,0(r8)
    2260:	1fc00017 	ldw	ra,0(r3)
    2264:	63c00017 	ldw	r15,0(r12)
    2268:	39000015 	stw	r4,0(r7)
    226c:	53800017 	ldw	r14,0(r10)
    2270:	6fc00015 	stw	ra,0(r13)
    2274:	5bc00015 	stw	r15,0(r11)
    2278:	4b800015 	stw	r14,0(r9)
    227c:	18c00404 	addi	r3,r3,16
    2280:	39c00404 	addi	r7,r7,16
    2284:	42000404 	addi	r8,r8,16
    2288:	6b400404 	addi	r13,r13,16
    228c:	63000404 	addi	r12,r12,16
    2290:	5ac00404 	addi	r11,r11,16
    2294:	52800404 	addi	r10,r10,16
    2298:	4a400404 	addi	r9,r9,16
    229c:	1c3fef1e 	bne	r3,r16,225c <memcpy+0x5c>
    22a0:	89c00044 	addi	r7,r17,1
    22a4:	380e913a 	slli	r7,r7,4
    22a8:	310003cc 	andi	r4,r6,15
    22ac:	02c000c4 	movi	r11,3
    22b0:	11c7883a 	add	r3,r2,r7
    22b4:	29cb883a 	add	r5,r5,r7
    22b8:	5900212e 	bgeu	r11,r4,2340 <memcpy+0x140>
    22bc:	1813883a 	mov	r9,r3
    22c0:	2811883a 	mov	r8,r5
    22c4:	200f883a 	mov	r7,r4
    22c8:	42800017 	ldw	r10,0(r8)
    22cc:	4a400104 	addi	r9,r9,4
    22d0:	39ffff04 	addi	r7,r7,-4
    22d4:	4abfff15 	stw	r10,-4(r9)
    22d8:	42000104 	addi	r8,r8,4
    22dc:	59fffa36 	bltu	r11,r7,22c8 <memcpy+0xc8>
    22e0:	213fff04 	addi	r4,r4,-4
    22e4:	2008d0ba 	srli	r4,r4,2
    22e8:	318000cc 	andi	r6,r6,3
    22ec:	21000044 	addi	r4,r4,1
    22f0:	2109883a 	add	r4,r4,r4
    22f4:	2109883a 	add	r4,r4,r4
    22f8:	1907883a 	add	r3,r3,r4
    22fc:	290b883a 	add	r5,r5,r4
    2300:	30000626 	beq	r6,zero,231c <memcpy+0x11c>
    2304:	198d883a 	add	r6,r3,r6
    2308:	29c00003 	ldbu	r7,0(r5)
    230c:	18c00044 	addi	r3,r3,1
    2310:	29400044 	addi	r5,r5,1
    2314:	19ffffc5 	stb	r7,-1(r3)
    2318:	19bffb1e 	bne	r3,r6,2308 <memcpy+0x108>
    231c:	dfc00217 	ldw	ra,8(sp)
    2320:	dc400117 	ldw	r17,4(sp)
    2324:	dc000017 	ldw	r16,0(sp)
    2328:	dec00304 	addi	sp,sp,12
    232c:	f800283a 	ret
    2330:	2007883a 	mov	r3,r4
    2334:	003ff206 	br	2300 <memcpy+0x100>
    2338:	2007883a 	mov	r3,r4
    233c:	003ff106 	br	2304 <memcpy+0x104>
    2340:	200d883a 	mov	r6,r4
    2344:	003fee06 	br	2300 <memcpy+0x100>

00002348 <strlen>:
    2348:	208000cc 	andi	r2,r4,3
    234c:	10002026 	beq	r2,zero,23d0 <strlen+0x88>
    2350:	20800007 	ldb	r2,0(r4)
    2354:	10002026 	beq	r2,zero,23d8 <strlen+0x90>
    2358:	2005883a 	mov	r2,r4
    235c:	00000206 	br	2368 <strlen+0x20>
    2360:	10c00007 	ldb	r3,0(r2)
    2364:	18001826 	beq	r3,zero,23c8 <strlen+0x80>
    2368:	10800044 	addi	r2,r2,1
    236c:	10c000cc 	andi	r3,r2,3
    2370:	183ffb1e 	bne	r3,zero,2360 <strlen+0x18>
    2374:	10c00017 	ldw	r3,0(r2)
    2378:	01ffbff4 	movhi	r7,65279
    237c:	39ffbfc4 	addi	r7,r7,-257
    2380:	00ca303a 	nor	r5,zero,r3
    2384:	01a02074 	movhi	r6,32897
    2388:	19c7883a 	add	r3,r3,r7
    238c:	31a02004 	addi	r6,r6,-32640
    2390:	1946703a 	and	r3,r3,r5
    2394:	1986703a 	and	r3,r3,r6
    2398:	1800091e 	bne	r3,zero,23c0 <strlen+0x78>
    239c:	10800104 	addi	r2,r2,4
    23a0:	10c00017 	ldw	r3,0(r2)
    23a4:	19cb883a 	add	r5,r3,r7
    23a8:	00c6303a 	nor	r3,zero,r3
    23ac:	28c6703a 	and	r3,r5,r3
    23b0:	1986703a 	and	r3,r3,r6
    23b4:	183ff926 	beq	r3,zero,239c <strlen+0x54>
    23b8:	00000106 	br	23c0 <strlen+0x78>
    23bc:	10800044 	addi	r2,r2,1
    23c0:	10c00007 	ldb	r3,0(r2)
    23c4:	183ffd1e 	bne	r3,zero,23bc <strlen+0x74>
    23c8:	1105c83a 	sub	r2,r2,r4
    23cc:	f800283a 	ret
    23d0:	2005883a 	mov	r2,r4
    23d4:	003fe706 	br	2374 <strlen+0x2c>
    23d8:	0005883a 	mov	r2,zero
    23dc:	f800283a 	ret

000023e0 <__register_exitproc>:
    23e0:	defffa04 	addi	sp,sp,-24
    23e4:	dc000315 	stw	r16,12(sp)
    23e8:	040000b4 	movhi	r16,2
    23ec:	8405a204 	addi	r16,r16,5768
    23f0:	80c00017 	ldw	r3,0(r16)
    23f4:	dc400415 	stw	r17,16(sp)
    23f8:	dfc00515 	stw	ra,20(sp)
    23fc:	18805217 	ldw	r2,328(r3)
    2400:	2023883a 	mov	r17,r4
    2404:	10003726 	beq	r2,zero,24e4 <__register_exitproc+0x104>
    2408:	10c00117 	ldw	r3,4(r2)
    240c:	010007c4 	movi	r4,31
    2410:	20c00e16 	blt	r4,r3,244c <__register_exitproc+0x6c>
    2414:	1a000044 	addi	r8,r3,1
    2418:	8800221e 	bne	r17,zero,24a4 <__register_exitproc+0xc4>
    241c:	18c00084 	addi	r3,r3,2
    2420:	18c7883a 	add	r3,r3,r3
    2424:	18c7883a 	add	r3,r3,r3
    2428:	12000115 	stw	r8,4(r2)
    242c:	10c7883a 	add	r3,r2,r3
    2430:	19400015 	stw	r5,0(r3)
    2434:	0005883a 	mov	r2,zero
    2438:	dfc00517 	ldw	ra,20(sp)
    243c:	dc400417 	ldw	r17,16(sp)
    2440:	dc000317 	ldw	r16,12(sp)
    2444:	dec00604 	addi	sp,sp,24
    2448:	f800283a 	ret
    244c:	00800034 	movhi	r2,0
    2450:	10800004 	addi	r2,r2,0
    2454:	10002626 	beq	r2,zero,24f0 <__register_exitproc+0x110>
    2458:	01006404 	movi	r4,400
    245c:	d9400015 	stw	r5,0(sp)
    2460:	d9800115 	stw	r6,4(sp)
    2464:	d9c00215 	stw	r7,8(sp)
    2468:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    246c:	d9400017 	ldw	r5,0(sp)
    2470:	d9800117 	ldw	r6,4(sp)
    2474:	d9c00217 	ldw	r7,8(sp)
    2478:	10001d26 	beq	r2,zero,24f0 <__register_exitproc+0x110>
    247c:	81000017 	ldw	r4,0(r16)
    2480:	10000115 	stw	zero,4(r2)
    2484:	02000044 	movi	r8,1
    2488:	22405217 	ldw	r9,328(r4)
    248c:	0007883a 	mov	r3,zero
    2490:	12400015 	stw	r9,0(r2)
    2494:	20805215 	stw	r2,328(r4)
    2498:	10006215 	stw	zero,392(r2)
    249c:	10006315 	stw	zero,396(r2)
    24a0:	883fde26 	beq	r17,zero,241c <__register_exitproc+0x3c>
    24a4:	18c9883a 	add	r4,r3,r3
    24a8:	2109883a 	add	r4,r4,r4
    24ac:	1109883a 	add	r4,r2,r4
    24b0:	21802215 	stw	r6,136(r4)
    24b4:	01800044 	movi	r6,1
    24b8:	12406217 	ldw	r9,392(r2)
    24bc:	30cc983a 	sll	r6,r6,r3
    24c0:	4992b03a 	or	r9,r9,r6
    24c4:	12406215 	stw	r9,392(r2)
    24c8:	21c04215 	stw	r7,264(r4)
    24cc:	01000084 	movi	r4,2
    24d0:	893fd21e 	bne	r17,r4,241c <__register_exitproc+0x3c>
    24d4:	11006317 	ldw	r4,396(r2)
    24d8:	218cb03a 	or	r6,r4,r6
    24dc:	11806315 	stw	r6,396(r2)
    24e0:	003fce06 	br	241c <__register_exitproc+0x3c>
    24e4:	18805304 	addi	r2,r3,332
    24e8:	18805215 	stw	r2,328(r3)
    24ec:	003fc606 	br	2408 <__register_exitproc+0x28>
    24f0:	00bfffc4 	movi	r2,-1
    24f4:	003fd006 	br	2438 <__register_exitproc+0x58>

000024f8 <__call_exitprocs>:
    24f8:	defff504 	addi	sp,sp,-44
    24fc:	df000915 	stw	fp,36(sp)
    2500:	dd400615 	stw	r21,24(sp)
    2504:	dc800315 	stw	r18,12(sp)
    2508:	dfc00a15 	stw	ra,40(sp)
    250c:	ddc00815 	stw	r23,32(sp)
    2510:	dd800715 	stw	r22,28(sp)
    2514:	dd000515 	stw	r20,20(sp)
    2518:	dcc00415 	stw	r19,16(sp)
    251c:	dc400215 	stw	r17,8(sp)
    2520:	dc000115 	stw	r16,4(sp)
    2524:	d9000015 	stw	r4,0(sp)
    2528:	2839883a 	mov	fp,r5
    252c:	04800044 	movi	r18,1
    2530:	057fffc4 	movi	r21,-1
    2534:	008000b4 	movhi	r2,2
    2538:	1085a204 	addi	r2,r2,5768
    253c:	12000017 	ldw	r8,0(r2)
    2540:	45005217 	ldw	r20,328(r8)
    2544:	44c05204 	addi	r19,r8,328
    2548:	a0001c26 	beq	r20,zero,25bc <__call_exitprocs+0xc4>
    254c:	a0800117 	ldw	r2,4(r20)
    2550:	15ffffc4 	addi	r23,r2,-1
    2554:	b8000d16 	blt	r23,zero,258c <__call_exitprocs+0x94>
    2558:	14000044 	addi	r16,r2,1
    255c:	8421883a 	add	r16,r16,r16
    2560:	8421883a 	add	r16,r16,r16
    2564:	84402004 	addi	r17,r16,128
    2568:	a463883a 	add	r17,r20,r17
    256c:	a421883a 	add	r16,r20,r16
    2570:	e0001e26 	beq	fp,zero,25ec <__call_exitprocs+0xf4>
    2574:	80804017 	ldw	r2,256(r16)
    2578:	e0801c26 	beq	fp,r2,25ec <__call_exitprocs+0xf4>
    257c:	bdffffc4 	addi	r23,r23,-1
    2580:	843fff04 	addi	r16,r16,-4
    2584:	8c7fff04 	addi	r17,r17,-4
    2588:	bd7ff91e 	bne	r23,r21,2570 <__call_exitprocs+0x78>
    258c:	00800034 	movhi	r2,0
    2590:	10800004 	addi	r2,r2,0
    2594:	10000926 	beq	r2,zero,25bc <__call_exitprocs+0xc4>
    2598:	a0800117 	ldw	r2,4(r20)
    259c:	1000301e 	bne	r2,zero,2660 <__call_exitprocs+0x168>
    25a0:	a0800017 	ldw	r2,0(r20)
    25a4:	10003226 	beq	r2,zero,2670 <__call_exitprocs+0x178>
    25a8:	a009883a 	mov	r4,r20
    25ac:	98800015 	stw	r2,0(r19)
    25b0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    25b4:	9d000017 	ldw	r20,0(r19)
    25b8:	a03fe41e 	bne	r20,zero,254c <__call_exitprocs+0x54>
    25bc:	dfc00a17 	ldw	ra,40(sp)
    25c0:	df000917 	ldw	fp,36(sp)
    25c4:	ddc00817 	ldw	r23,32(sp)
    25c8:	dd800717 	ldw	r22,28(sp)
    25cc:	dd400617 	ldw	r21,24(sp)
    25d0:	dd000517 	ldw	r20,20(sp)
    25d4:	dcc00417 	ldw	r19,16(sp)
    25d8:	dc800317 	ldw	r18,12(sp)
    25dc:	dc400217 	ldw	r17,8(sp)
    25e0:	dc000117 	ldw	r16,4(sp)
    25e4:	dec00b04 	addi	sp,sp,44
    25e8:	f800283a 	ret
    25ec:	a0800117 	ldw	r2,4(r20)
    25f0:	80c00017 	ldw	r3,0(r16)
    25f4:	10bfffc4 	addi	r2,r2,-1
    25f8:	15c01426 	beq	r2,r23,264c <__call_exitprocs+0x154>
    25fc:	80000015 	stw	zero,0(r16)
    2600:	183fde26 	beq	r3,zero,257c <__call_exitprocs+0x84>
    2604:	95c8983a 	sll	r4,r18,r23
    2608:	a0806217 	ldw	r2,392(r20)
    260c:	a5800117 	ldw	r22,4(r20)
    2610:	2084703a 	and	r2,r4,r2
    2614:	10000b26 	beq	r2,zero,2644 <__call_exitprocs+0x14c>
    2618:	a0806317 	ldw	r2,396(r20)
    261c:	2088703a 	and	r4,r4,r2
    2620:	20000c1e 	bne	r4,zero,2654 <__call_exitprocs+0x15c>
    2624:	89400017 	ldw	r5,0(r17)
    2628:	d9000017 	ldw	r4,0(sp)
    262c:	183ee83a 	callr	r3
    2630:	a0800117 	ldw	r2,4(r20)
    2634:	15bfbf1e 	bne	r2,r22,2534 <__call_exitprocs+0x3c>
    2638:	98800017 	ldw	r2,0(r19)
    263c:	153fcf26 	beq	r2,r20,257c <__call_exitprocs+0x84>
    2640:	003fbc06 	br	2534 <__call_exitprocs+0x3c>
    2644:	183ee83a 	callr	r3
    2648:	003ff906 	br	2630 <__call_exitprocs+0x138>
    264c:	a5c00115 	stw	r23,4(r20)
    2650:	003feb06 	br	2600 <__call_exitprocs+0x108>
    2654:	89000017 	ldw	r4,0(r17)
    2658:	183ee83a 	callr	r3
    265c:	003ff406 	br	2630 <__call_exitprocs+0x138>
    2660:	a0800017 	ldw	r2,0(r20)
    2664:	a027883a 	mov	r19,r20
    2668:	1029883a 	mov	r20,r2
    266c:	003fb606 	br	2548 <__call_exitprocs+0x50>
    2670:	0005883a 	mov	r2,zero
    2674:	003ffb06 	br	2664 <__call_exitprocs+0x16c>

00002678 <__divsi3>:
    2678:	20001b16 	blt	r4,zero,26e8 <__divsi3+0x70>
    267c:	000f883a 	mov	r7,zero
    2680:	28001616 	blt	r5,zero,26dc <__divsi3+0x64>
    2684:	200d883a 	mov	r6,r4
    2688:	29001a2e 	bgeu	r5,r4,26f4 <__divsi3+0x7c>
    268c:	00800804 	movi	r2,32
    2690:	00c00044 	movi	r3,1
    2694:	00000106 	br	269c <__divsi3+0x24>
    2698:	10000d26 	beq	r2,zero,26d0 <__divsi3+0x58>
    269c:	294b883a 	add	r5,r5,r5
    26a0:	10bfffc4 	addi	r2,r2,-1
    26a4:	18c7883a 	add	r3,r3,r3
    26a8:	293ffb36 	bltu	r5,r4,2698 <__divsi3+0x20>
    26ac:	0005883a 	mov	r2,zero
    26b0:	18000726 	beq	r3,zero,26d0 <__divsi3+0x58>
    26b4:	0005883a 	mov	r2,zero
    26b8:	31400236 	bltu	r6,r5,26c4 <__divsi3+0x4c>
    26bc:	314dc83a 	sub	r6,r6,r5
    26c0:	10c4b03a 	or	r2,r2,r3
    26c4:	1806d07a 	srli	r3,r3,1
    26c8:	280ad07a 	srli	r5,r5,1
    26cc:	183ffa1e 	bne	r3,zero,26b8 <__divsi3+0x40>
    26d0:	38000126 	beq	r7,zero,26d8 <__divsi3+0x60>
    26d4:	0085c83a 	sub	r2,zero,r2
    26d8:	f800283a 	ret
    26dc:	014bc83a 	sub	r5,zero,r5
    26e0:	39c0005c 	xori	r7,r7,1
    26e4:	003fe706 	br	2684 <__divsi3+0xc>
    26e8:	0109c83a 	sub	r4,zero,r4
    26ec:	01c00044 	movi	r7,1
    26f0:	003fe306 	br	2680 <__divsi3+0x8>
    26f4:	00c00044 	movi	r3,1
    26f8:	003fee06 	br	26b4 <__divsi3+0x3c>

000026fc <__modsi3>:
    26fc:	20001716 	blt	r4,zero,275c <__modsi3+0x60>
    2700:	000f883a 	mov	r7,zero
    2704:	2005883a 	mov	r2,r4
    2708:	28001216 	blt	r5,zero,2754 <__modsi3+0x58>
    270c:	2900162e 	bgeu	r5,r4,2768 <__modsi3+0x6c>
    2710:	01800804 	movi	r6,32
    2714:	00c00044 	movi	r3,1
    2718:	00000106 	br	2720 <__modsi3+0x24>
    271c:	30000a26 	beq	r6,zero,2748 <__modsi3+0x4c>
    2720:	294b883a 	add	r5,r5,r5
    2724:	31bfffc4 	addi	r6,r6,-1
    2728:	18c7883a 	add	r3,r3,r3
    272c:	293ffb36 	bltu	r5,r4,271c <__modsi3+0x20>
    2730:	18000526 	beq	r3,zero,2748 <__modsi3+0x4c>
    2734:	1806d07a 	srli	r3,r3,1
    2738:	11400136 	bltu	r2,r5,2740 <__modsi3+0x44>
    273c:	1145c83a 	sub	r2,r2,r5
    2740:	280ad07a 	srli	r5,r5,1
    2744:	183ffb1e 	bne	r3,zero,2734 <__modsi3+0x38>
    2748:	38000126 	beq	r7,zero,2750 <__modsi3+0x54>
    274c:	0085c83a 	sub	r2,zero,r2
    2750:	f800283a 	ret
    2754:	014bc83a 	sub	r5,zero,r5
    2758:	003fec06 	br	270c <__modsi3+0x10>
    275c:	0109c83a 	sub	r4,zero,r4
    2760:	01c00044 	movi	r7,1
    2764:	003fe706 	br	2704 <__modsi3+0x8>
    2768:	00c00044 	movi	r3,1
    276c:	003ff106 	br	2734 <__modsi3+0x38>

00002770 <__udivsi3>:
    2770:	200d883a 	mov	r6,r4
    2774:	2900152e 	bgeu	r5,r4,27cc <__udivsi3+0x5c>
    2778:	28001416 	blt	r5,zero,27cc <__udivsi3+0x5c>
    277c:	00800804 	movi	r2,32
    2780:	00c00044 	movi	r3,1
    2784:	00000206 	br	2790 <__udivsi3+0x20>
    2788:	10000e26 	beq	r2,zero,27c4 <__udivsi3+0x54>
    278c:	28000516 	blt	r5,zero,27a4 <__udivsi3+0x34>
    2790:	294b883a 	add	r5,r5,r5
    2794:	10bfffc4 	addi	r2,r2,-1
    2798:	18c7883a 	add	r3,r3,r3
    279c:	293ffa36 	bltu	r5,r4,2788 <__udivsi3+0x18>
    27a0:	18000826 	beq	r3,zero,27c4 <__udivsi3+0x54>
    27a4:	0005883a 	mov	r2,zero
    27a8:	31400236 	bltu	r6,r5,27b4 <__udivsi3+0x44>
    27ac:	314dc83a 	sub	r6,r6,r5
    27b0:	10c4b03a 	or	r2,r2,r3
    27b4:	1806d07a 	srli	r3,r3,1
    27b8:	280ad07a 	srli	r5,r5,1
    27bc:	183ffa1e 	bne	r3,zero,27a8 <__udivsi3+0x38>
    27c0:	f800283a 	ret
    27c4:	0005883a 	mov	r2,zero
    27c8:	f800283a 	ret
    27cc:	00c00044 	movi	r3,1
    27d0:	003ff406 	br	27a4 <__udivsi3+0x34>

000027d4 <__umodsi3>:
    27d4:	2005883a 	mov	r2,r4
    27d8:	2900122e 	bgeu	r5,r4,2824 <__umodsi3+0x50>
    27dc:	28001116 	blt	r5,zero,2824 <__umodsi3+0x50>
    27e0:	01800804 	movi	r6,32
    27e4:	00c00044 	movi	r3,1
    27e8:	00000206 	br	27f4 <__umodsi3+0x20>
    27ec:	30000c26 	beq	r6,zero,2820 <__umodsi3+0x4c>
    27f0:	28000516 	blt	r5,zero,2808 <__umodsi3+0x34>
    27f4:	294b883a 	add	r5,r5,r5
    27f8:	31bfffc4 	addi	r6,r6,-1
    27fc:	18c7883a 	add	r3,r3,r3
    2800:	293ffa36 	bltu	r5,r4,27ec <__umodsi3+0x18>
    2804:	18000626 	beq	r3,zero,2820 <__umodsi3+0x4c>
    2808:	1806d07a 	srli	r3,r3,1
    280c:	11400136 	bltu	r2,r5,2814 <__umodsi3+0x40>
    2810:	1145c83a 	sub	r2,r2,r5
    2814:	280ad07a 	srli	r5,r5,1
    2818:	183ffb1e 	bne	r3,zero,2808 <__umodsi3+0x34>
    281c:	f800283a 	ret
    2820:	f800283a 	ret
    2824:	00c00044 	movi	r3,1
    2828:	003ff706 	br	2808 <__umodsi3+0x34>

0000282c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    282c:	defffd04 	addi	sp,sp,-12
    2830:	df000215 	stw	fp,8(sp)
    2834:	df000204 	addi	fp,sp,8
    2838:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    283c:	0001883a 	nop
    2840:	e0bfff17 	ldw	r2,-4(fp)
    2844:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    2848:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    284c:	10000226 	beq	r2,zero,2858 <_exit+0x2c>
    ALT_SIM_FAIL();
    2850:	002af070 	cmpltui	zero,zero,43969
    2854:	00000106 	br	285c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    2858:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    285c:	003fff06 	br	285c <_exit+0x30>
